// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debugpb.proto

#ifndef PROTOBUF_debugpb_2eproto__INCLUDED
#define PROTOBUF_debugpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "eraftpb.pb.h"
#include "kvrpcpb.pb.h"
#include "raft_serverpb.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_debugpb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetRequestImpl();
void InitDefaultsGetRequest();
void InitDefaultsGetResponseImpl();
void InitDefaultsGetResponse();
void InitDefaultsRaftLogRequestImpl();
void InitDefaultsRaftLogRequest();
void InitDefaultsRaftLogResponseImpl();
void InitDefaultsRaftLogResponse();
void InitDefaultsRegionInfoRequestImpl();
void InitDefaultsRegionInfoRequest();
void InitDefaultsRegionInfoResponseImpl();
void InitDefaultsRegionInfoResponse();
void InitDefaultsRegionSizeRequestImpl();
void InitDefaultsRegionSizeRequest();
void InitDefaultsRegionSizeResponse_EntryImpl();
void InitDefaultsRegionSizeResponse_Entry();
void InitDefaultsRegionSizeResponseImpl();
void InitDefaultsRegionSizeResponse();
void InitDefaultsScanMvccRequestImpl();
void InitDefaultsScanMvccRequest();
void InitDefaultsScanMvccResponseImpl();
void InitDefaultsScanMvccResponse();
void InitDefaultsCompactRequestImpl();
void InitDefaultsCompactRequest();
void InitDefaultsCompactResponseImpl();
void InitDefaultsCompactResponse();
void InitDefaultsInjectFailPointRequestImpl();
void InitDefaultsInjectFailPointRequest();
void InitDefaultsInjectFailPointResponseImpl();
void InitDefaultsInjectFailPointResponse();
void InitDefaultsRecoverFailPointRequestImpl();
void InitDefaultsRecoverFailPointRequest();
void InitDefaultsRecoverFailPointResponseImpl();
void InitDefaultsRecoverFailPointResponse();
void InitDefaultsListFailPointsRequestImpl();
void InitDefaultsListFailPointsRequest();
void InitDefaultsListFailPointsResponse_EntryImpl();
void InitDefaultsListFailPointsResponse_Entry();
void InitDefaultsListFailPointsResponseImpl();
void InitDefaultsListFailPointsResponse();
void InitDefaultsGetMetricsRequestImpl();
void InitDefaultsGetMetricsRequest();
void InitDefaultsGetMetricsResponseImpl();
void InitDefaultsGetMetricsResponse();
void InitDefaultsRegionConsistencyCheckRequestImpl();
void InitDefaultsRegionConsistencyCheckRequest();
void InitDefaultsRegionConsistencyCheckResponseImpl();
void InitDefaultsRegionConsistencyCheckResponse();
void InitDefaultsModifyTikvConfigRequestImpl();
void InitDefaultsModifyTikvConfigRequest();
void InitDefaultsModifyTikvConfigResponseImpl();
void InitDefaultsModifyTikvConfigResponse();
inline void InitDefaults() {
  InitDefaultsGetRequest();
  InitDefaultsGetResponse();
  InitDefaultsRaftLogRequest();
  InitDefaultsRaftLogResponse();
  InitDefaultsRegionInfoRequest();
  InitDefaultsRegionInfoResponse();
  InitDefaultsRegionSizeRequest();
  InitDefaultsRegionSizeResponse_Entry();
  InitDefaultsRegionSizeResponse();
  InitDefaultsScanMvccRequest();
  InitDefaultsScanMvccResponse();
  InitDefaultsCompactRequest();
  InitDefaultsCompactResponse();
  InitDefaultsInjectFailPointRequest();
  InitDefaultsInjectFailPointResponse();
  InitDefaultsRecoverFailPointRequest();
  InitDefaultsRecoverFailPointResponse();
  InitDefaultsListFailPointsRequest();
  InitDefaultsListFailPointsResponse_Entry();
  InitDefaultsListFailPointsResponse();
  InitDefaultsGetMetricsRequest();
  InitDefaultsGetMetricsResponse();
  InitDefaultsRegionConsistencyCheckRequest();
  InitDefaultsRegionConsistencyCheckResponse();
  InitDefaultsModifyTikvConfigRequest();
  InitDefaultsModifyTikvConfigResponse();
}
}  // namespace protobuf_debugpb_2eproto
namespace debugpb {
class CompactRequest;
class CompactRequestDefaultTypeInternal;
extern CompactRequestDefaultTypeInternal _CompactRequest_default_instance_;
class CompactResponse;
class CompactResponseDefaultTypeInternal;
extern CompactResponseDefaultTypeInternal _CompactResponse_default_instance_;
class GetMetricsRequest;
class GetMetricsRequestDefaultTypeInternal;
extern GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
class GetMetricsResponse;
class GetMetricsResponseDefaultTypeInternal;
extern GetMetricsResponseDefaultTypeInternal _GetMetricsResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class InjectFailPointRequest;
class InjectFailPointRequestDefaultTypeInternal;
extern InjectFailPointRequestDefaultTypeInternal _InjectFailPointRequest_default_instance_;
class InjectFailPointResponse;
class InjectFailPointResponseDefaultTypeInternal;
extern InjectFailPointResponseDefaultTypeInternal _InjectFailPointResponse_default_instance_;
class ListFailPointsRequest;
class ListFailPointsRequestDefaultTypeInternal;
extern ListFailPointsRequestDefaultTypeInternal _ListFailPointsRequest_default_instance_;
class ListFailPointsResponse;
class ListFailPointsResponseDefaultTypeInternal;
extern ListFailPointsResponseDefaultTypeInternal _ListFailPointsResponse_default_instance_;
class ListFailPointsResponse_Entry;
class ListFailPointsResponse_EntryDefaultTypeInternal;
extern ListFailPointsResponse_EntryDefaultTypeInternal _ListFailPointsResponse_Entry_default_instance_;
class ModifyTikvConfigRequest;
class ModifyTikvConfigRequestDefaultTypeInternal;
extern ModifyTikvConfigRequestDefaultTypeInternal _ModifyTikvConfigRequest_default_instance_;
class ModifyTikvConfigResponse;
class ModifyTikvConfigResponseDefaultTypeInternal;
extern ModifyTikvConfigResponseDefaultTypeInternal _ModifyTikvConfigResponse_default_instance_;
class RaftLogRequest;
class RaftLogRequestDefaultTypeInternal;
extern RaftLogRequestDefaultTypeInternal _RaftLogRequest_default_instance_;
class RaftLogResponse;
class RaftLogResponseDefaultTypeInternal;
extern RaftLogResponseDefaultTypeInternal _RaftLogResponse_default_instance_;
class RecoverFailPointRequest;
class RecoverFailPointRequestDefaultTypeInternal;
extern RecoverFailPointRequestDefaultTypeInternal _RecoverFailPointRequest_default_instance_;
class RecoverFailPointResponse;
class RecoverFailPointResponseDefaultTypeInternal;
extern RecoverFailPointResponseDefaultTypeInternal _RecoverFailPointResponse_default_instance_;
class RegionConsistencyCheckRequest;
class RegionConsistencyCheckRequestDefaultTypeInternal;
extern RegionConsistencyCheckRequestDefaultTypeInternal _RegionConsistencyCheckRequest_default_instance_;
class RegionConsistencyCheckResponse;
class RegionConsistencyCheckResponseDefaultTypeInternal;
extern RegionConsistencyCheckResponseDefaultTypeInternal _RegionConsistencyCheckResponse_default_instance_;
class RegionInfoRequest;
class RegionInfoRequestDefaultTypeInternal;
extern RegionInfoRequestDefaultTypeInternal _RegionInfoRequest_default_instance_;
class RegionInfoResponse;
class RegionInfoResponseDefaultTypeInternal;
extern RegionInfoResponseDefaultTypeInternal _RegionInfoResponse_default_instance_;
class RegionSizeRequest;
class RegionSizeRequestDefaultTypeInternal;
extern RegionSizeRequestDefaultTypeInternal _RegionSizeRequest_default_instance_;
class RegionSizeResponse;
class RegionSizeResponseDefaultTypeInternal;
extern RegionSizeResponseDefaultTypeInternal _RegionSizeResponse_default_instance_;
class RegionSizeResponse_Entry;
class RegionSizeResponse_EntryDefaultTypeInternal;
extern RegionSizeResponse_EntryDefaultTypeInternal _RegionSizeResponse_Entry_default_instance_;
class ScanMvccRequest;
class ScanMvccRequestDefaultTypeInternal;
extern ScanMvccRequestDefaultTypeInternal _ScanMvccRequest_default_instance_;
class ScanMvccResponse;
class ScanMvccResponseDefaultTypeInternal;
extern ScanMvccResponseDefaultTypeInternal _ScanMvccResponse_default_instance_;
}  // namespace debugpb
namespace debugpb {

enum DB {
  INVALID = 0,
  KV = 1,
  RAFT = 2,
  DB_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DB_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DB_IsValid(int value);
const DB DB_MIN = INVALID;
const DB DB_MAX = RAFT;
const int DB_ARRAYSIZE = DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DB_descriptor();
inline const ::std::string& DB_Name(DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DB_descriptor(), value);
}
inline bool DB_Parse(
    const ::std::string& name, DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DB>(
    DB_descriptor(), name, value);
}
enum MODULE {
  UNUSED = 0,
  KVDB = 1,
  RAFTDB = 2,
  READPOOL = 3,
  SERVER = 4,
  STORAGE = 5,
  PD = 6,
  METRIC = 7,
  COPROCESSOR = 8,
  SECURITY = 9,
  IMPORT = 10,
  MODULE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MODULE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MODULE_IsValid(int value);
const MODULE MODULE_MIN = UNUSED;
const MODULE MODULE_MAX = IMPORT;
const int MODULE_ARRAYSIZE = MODULE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MODULE_descriptor();
inline const ::std::string& MODULE_Name(MODULE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MODULE_descriptor(), value);
}
inline bool MODULE_Parse(
    const ::std::string& name, MODULE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MODULE>(
    MODULE_descriptor(), name, value);
}
// ===================================================================

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 2;
  void clear_cf();
  static const int kCfFieldNumber = 2;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // bytes key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .debugpb.DB db = 1;
  void clear_db();
  static const int kDbFieldNumber = 1;
  ::debugpb::DB db() const;
  void set_db(::debugpb::DB value);

  // @@protoc_insertion_point(class_scope:debugpb.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int db_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsGetRequestImpl();
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:debugpb.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsGetResponseImpl();
};
// -------------------------------------------------------------------

class RaftLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RaftLogRequest) */ {
 public:
  RaftLogRequest();
  virtual ~RaftLogRequest();

  RaftLogRequest(const RaftLogRequest& from);

  inline RaftLogRequest& operator=(const RaftLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftLogRequest(RaftLogRequest&& from) noexcept
    : RaftLogRequest() {
    *this = ::std::move(from);
  }

  inline RaftLogRequest& operator=(RaftLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftLogRequest* internal_default_instance() {
    return reinterpret_cast<const RaftLogRequest*>(
               &_RaftLogRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RaftLogRequest* other);
  friend void swap(RaftLogRequest& a, RaftLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftLogRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftLogRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaftLogRequest& from);
  void MergeFrom(const RaftLogRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaftLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // uint64 log_index = 2;
  void clear_log_index();
  static const int kLogIndexFieldNumber = 2;
  ::google::protobuf::uint64 log_index() const;
  void set_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:debugpb.RaftLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 region_id_;
  ::google::protobuf::uint64 log_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRaftLogRequestImpl();
};
// -------------------------------------------------------------------

class RaftLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RaftLogResponse) */ {
 public:
  RaftLogResponse();
  virtual ~RaftLogResponse();

  RaftLogResponse(const RaftLogResponse& from);

  inline RaftLogResponse& operator=(const RaftLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftLogResponse(RaftLogResponse&& from) noexcept
    : RaftLogResponse() {
    *this = ::std::move(from);
  }

  inline RaftLogResponse& operator=(RaftLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftLogResponse* internal_default_instance() {
    return reinterpret_cast<const RaftLogResponse*>(
               &_RaftLogResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RaftLogResponse* other);
  friend void swap(RaftLogResponse& a, RaftLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftLogResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftLogResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaftLogResponse& from);
  void MergeFrom(const RaftLogResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaftLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .eraftpb.Entry entry = 1;
  bool has_entry() const;
  void clear_entry();
  static const int kEntryFieldNumber = 1;
  const ::eraftpb::Entry& entry() const;
  ::eraftpb::Entry* release_entry();
  ::eraftpb::Entry* mutable_entry();
  void set_allocated_entry(::eraftpb::Entry* entry);

  // @@protoc_insertion_point(class_scope:debugpb.RaftLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eraftpb::Entry* entry_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRaftLogResponseImpl();
};
// -------------------------------------------------------------------

class RegionInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionInfoRequest) */ {
 public:
  RegionInfoRequest();
  virtual ~RegionInfoRequest();

  RegionInfoRequest(const RegionInfoRequest& from);

  inline RegionInfoRequest& operator=(const RegionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionInfoRequest(RegionInfoRequest&& from) noexcept
    : RegionInfoRequest() {
    *this = ::std::move(from);
  }

  inline RegionInfoRequest& operator=(RegionInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionInfoRequest* internal_default_instance() {
    return reinterpret_cast<const RegionInfoRequest*>(
               &_RegionInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RegionInfoRequest* other);
  friend void swap(RegionInfoRequest& a, RegionInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionInfoRequest& from);
  void MergeFrom(const RegionInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:debugpb.RegionInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 region_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionInfoRequestImpl();
};
// -------------------------------------------------------------------

class RegionInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionInfoResponse) */ {
 public:
  RegionInfoResponse();
  virtual ~RegionInfoResponse();

  RegionInfoResponse(const RegionInfoResponse& from);

  inline RegionInfoResponse& operator=(const RegionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionInfoResponse(RegionInfoResponse&& from) noexcept
    : RegionInfoResponse() {
    *this = ::std::move(from);
  }

  inline RegionInfoResponse& operator=(RegionInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionInfoResponse* internal_default_instance() {
    return reinterpret_cast<const RegionInfoResponse*>(
               &_RegionInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RegionInfoResponse* other);
  friend void swap(RegionInfoResponse& a, RegionInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionInfoResponse& from);
  void MergeFrom(const RegionInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_serverpb.RaftLocalState raft_local_state = 1;
  bool has_raft_local_state() const;
  void clear_raft_local_state();
  static const int kRaftLocalStateFieldNumber = 1;
  const ::raft_serverpb::RaftLocalState& raft_local_state() const;
  ::raft_serverpb::RaftLocalState* release_raft_local_state();
  ::raft_serverpb::RaftLocalState* mutable_raft_local_state();
  void set_allocated_raft_local_state(::raft_serverpb::RaftLocalState* raft_local_state);

  // .raft_serverpb.RaftApplyState raft_apply_state = 2;
  bool has_raft_apply_state() const;
  void clear_raft_apply_state();
  static const int kRaftApplyStateFieldNumber = 2;
  const ::raft_serverpb::RaftApplyState& raft_apply_state() const;
  ::raft_serverpb::RaftApplyState* release_raft_apply_state();
  ::raft_serverpb::RaftApplyState* mutable_raft_apply_state();
  void set_allocated_raft_apply_state(::raft_serverpb::RaftApplyState* raft_apply_state);

  // .raft_serverpb.RegionLocalState region_local_state = 3;
  bool has_region_local_state() const;
  void clear_region_local_state();
  static const int kRegionLocalStateFieldNumber = 3;
  const ::raft_serverpb::RegionLocalState& region_local_state() const;
  ::raft_serverpb::RegionLocalState* release_region_local_state();
  ::raft_serverpb::RegionLocalState* mutable_region_local_state();
  void set_allocated_region_local_state(::raft_serverpb::RegionLocalState* region_local_state);

  // @@protoc_insertion_point(class_scope:debugpb.RegionInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_serverpb::RaftLocalState* raft_local_state_;
  ::raft_serverpb::RaftApplyState* raft_apply_state_;
  ::raft_serverpb::RegionLocalState* region_local_state_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionInfoResponseImpl();
};
// -------------------------------------------------------------------

class RegionSizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionSizeRequest) */ {
 public:
  RegionSizeRequest();
  virtual ~RegionSizeRequest();

  RegionSizeRequest(const RegionSizeRequest& from);

  inline RegionSizeRequest& operator=(const RegionSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionSizeRequest(RegionSizeRequest&& from) noexcept
    : RegionSizeRequest() {
    *this = ::std::move(from);
  }

  inline RegionSizeRequest& operator=(RegionSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionSizeRequest* internal_default_instance() {
    return reinterpret_cast<const RegionSizeRequest*>(
               &_RegionSizeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RegionSizeRequest* other);
  friend void swap(RegionSizeRequest& a, RegionSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionSizeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionSizeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionSizeRequest& from);
  void MergeFrom(const RegionSizeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionSizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cfs = 2;
  int cfs_size() const;
  void clear_cfs();
  static const int kCfsFieldNumber = 2;
  const ::std::string& cfs(int index) const;
  ::std::string* mutable_cfs(int index);
  void set_cfs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cfs(int index, ::std::string&& value);
  #endif
  void set_cfs(int index, const char* value);
  void set_cfs(int index, const char* value, size_t size);
  ::std::string* add_cfs();
  void add_cfs(const ::std::string& value);
  #if LANG_CXX11
  void add_cfs(::std::string&& value);
  #endif
  void add_cfs(const char* value);
  void add_cfs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cfs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cfs();

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:debugpb.RegionSizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cfs_;
  ::google::protobuf::uint64 region_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionSizeRequestImpl();
};
// -------------------------------------------------------------------

class RegionSizeResponse_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionSizeResponse.Entry) */ {
 public:
  RegionSizeResponse_Entry();
  virtual ~RegionSizeResponse_Entry();

  RegionSizeResponse_Entry(const RegionSizeResponse_Entry& from);

  inline RegionSizeResponse_Entry& operator=(const RegionSizeResponse_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionSizeResponse_Entry(RegionSizeResponse_Entry&& from) noexcept
    : RegionSizeResponse_Entry() {
    *this = ::std::move(from);
  }

  inline RegionSizeResponse_Entry& operator=(RegionSizeResponse_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionSizeResponse_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionSizeResponse_Entry* internal_default_instance() {
    return reinterpret_cast<const RegionSizeResponse_Entry*>(
               &_RegionSizeResponse_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RegionSizeResponse_Entry* other);
  friend void swap(RegionSizeResponse_Entry& a, RegionSizeResponse_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionSizeResponse_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionSizeResponse_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionSizeResponse_Entry& from);
  void MergeFrom(const RegionSizeResponse_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionSizeResponse_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:debugpb.RegionSizeResponse.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::uint64 size_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionSizeResponse_EntryImpl();
};
// -------------------------------------------------------------------

class RegionSizeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionSizeResponse) */ {
 public:
  RegionSizeResponse();
  virtual ~RegionSizeResponse();

  RegionSizeResponse(const RegionSizeResponse& from);

  inline RegionSizeResponse& operator=(const RegionSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionSizeResponse(RegionSizeResponse&& from) noexcept
    : RegionSizeResponse() {
    *this = ::std::move(from);
  }

  inline RegionSizeResponse& operator=(RegionSizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionSizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionSizeResponse* internal_default_instance() {
    return reinterpret_cast<const RegionSizeResponse*>(
               &_RegionSizeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RegionSizeResponse* other);
  friend void swap(RegionSizeResponse& a, RegionSizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionSizeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionSizeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionSizeResponse& from);
  void MergeFrom(const RegionSizeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionSizeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RegionSizeResponse_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .debugpb.RegionSizeResponse.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::debugpb::RegionSizeResponse_Entry& entries(int index) const;
  ::debugpb::RegionSizeResponse_Entry* mutable_entries(int index);
  ::debugpb::RegionSizeResponse_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::debugpb::RegionSizeResponse_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::debugpb::RegionSizeResponse_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:debugpb.RegionSizeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::debugpb::RegionSizeResponse_Entry > entries_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionSizeResponseImpl();
};
// -------------------------------------------------------------------

class ScanMvccRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ScanMvccRequest) */ {
 public:
  ScanMvccRequest();
  virtual ~ScanMvccRequest();

  ScanMvccRequest(const ScanMvccRequest& from);

  inline ScanMvccRequest& operator=(const ScanMvccRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanMvccRequest(ScanMvccRequest&& from) noexcept
    : ScanMvccRequest() {
    *this = ::std::move(from);
  }

  inline ScanMvccRequest& operator=(ScanMvccRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanMvccRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanMvccRequest* internal_default_instance() {
    return reinterpret_cast<const ScanMvccRequest*>(
               &_ScanMvccRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ScanMvccRequest* other);
  friend void swap(ScanMvccRequest& a, ScanMvccRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanMvccRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ScanMvccRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScanMvccRequest& from);
  void MergeFrom(const ScanMvccRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScanMvccRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes from_key = 1;
  void clear_from_key();
  static const int kFromKeyFieldNumber = 1;
  const ::std::string& from_key() const;
  void set_from_key(const ::std::string& value);
  #if LANG_CXX11
  void set_from_key(::std::string&& value);
  #endif
  void set_from_key(const char* value);
  void set_from_key(const void* value, size_t size);
  ::std::string* mutable_from_key();
  ::std::string* release_from_key();
  void set_allocated_from_key(::std::string* from_key);

  // bytes to_key = 2;
  void clear_to_key();
  static const int kToKeyFieldNumber = 2;
  const ::std::string& to_key() const;
  void set_to_key(const ::std::string& value);
  #if LANG_CXX11
  void set_to_key(::std::string&& value);
  #endif
  void set_to_key(const char* value);
  void set_to_key(const void* value, size_t size);
  ::std::string* mutable_to_key();
  ::std::string* release_to_key();
  void set_allocated_to_key(::std::string* to_key);

  // uint64 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::uint64 limit() const;
  void set_limit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:debugpb.ScanMvccRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_key_;
  ::google::protobuf::internal::ArenaStringPtr to_key_;
  ::google::protobuf::uint64 limit_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsScanMvccRequestImpl();
};
// -------------------------------------------------------------------

class ScanMvccResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ScanMvccResponse) */ {
 public:
  ScanMvccResponse();
  virtual ~ScanMvccResponse();

  ScanMvccResponse(const ScanMvccResponse& from);

  inline ScanMvccResponse& operator=(const ScanMvccResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanMvccResponse(ScanMvccResponse&& from) noexcept
    : ScanMvccResponse() {
    *this = ::std::move(from);
  }

  inline ScanMvccResponse& operator=(ScanMvccResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanMvccResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanMvccResponse* internal_default_instance() {
    return reinterpret_cast<const ScanMvccResponse*>(
               &_ScanMvccResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ScanMvccResponse* other);
  friend void swap(ScanMvccResponse& a, ScanMvccResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanMvccResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ScanMvccResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScanMvccResponse& from);
  void MergeFrom(const ScanMvccResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScanMvccResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .kvrpcpb.MvccInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::kvrpcpb::MvccInfo& info() const;
  ::kvrpcpb::MvccInfo* release_info();
  ::kvrpcpb::MvccInfo* mutable_info();
  void set_allocated_info(::kvrpcpb::MvccInfo* info);

  // @@protoc_insertion_point(class_scope:debugpb.ScanMvccResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::kvrpcpb::MvccInfo* info_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsScanMvccResponseImpl();
};
// -------------------------------------------------------------------

class CompactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.CompactRequest) */ {
 public:
  CompactRequest();
  virtual ~CompactRequest();

  CompactRequest(const CompactRequest& from);

  inline CompactRequest& operator=(const CompactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompactRequest(CompactRequest&& from) noexcept
    : CompactRequest() {
    *this = ::std::move(from);
  }

  inline CompactRequest& operator=(CompactRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactRequest* internal_default_instance() {
    return reinterpret_cast<const CompactRequest*>(
               &_CompactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CompactRequest* other);
  friend void swap(CompactRequest& a, CompactRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CompactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompactRequest& from);
  void MergeFrom(const CompactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 2;
  void clear_cf();
  static const int kCfFieldNumber = 2;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // bytes from_key = 3;
  void clear_from_key();
  static const int kFromKeyFieldNumber = 3;
  const ::std::string& from_key() const;
  void set_from_key(const ::std::string& value);
  #if LANG_CXX11
  void set_from_key(::std::string&& value);
  #endif
  void set_from_key(const char* value);
  void set_from_key(const void* value, size_t size);
  ::std::string* mutable_from_key();
  ::std::string* release_from_key();
  void set_allocated_from_key(::std::string* from_key);

  // bytes to_key = 4;
  void clear_to_key();
  static const int kToKeyFieldNumber = 4;
  const ::std::string& to_key() const;
  void set_to_key(const ::std::string& value);
  #if LANG_CXX11
  void set_to_key(::std::string&& value);
  #endif
  void set_to_key(const char* value);
  void set_to_key(const void* value, size_t size);
  ::std::string* mutable_to_key();
  ::std::string* release_to_key();
  void set_allocated_to_key(::std::string* to_key);

  // .debugpb.DB db = 1;
  void clear_db();
  static const int kDbFieldNumber = 1;
  ::debugpb::DB db() const;
  void set_db(::debugpb::DB value);

  // uint32 threads = 5;
  void clear_threads();
  static const int kThreadsFieldNumber = 5;
  ::google::protobuf::uint32 threads() const;
  void set_threads(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:debugpb.CompactRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr from_key_;
  ::google::protobuf::internal::ArenaStringPtr to_key_;
  int db_;
  ::google::protobuf::uint32 threads_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsCompactRequestImpl();
};
// -------------------------------------------------------------------

class CompactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.CompactResponse) */ {
 public:
  CompactResponse();
  virtual ~CompactResponse();

  CompactResponse(const CompactResponse& from);

  inline CompactResponse& operator=(const CompactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompactResponse(CompactResponse&& from) noexcept
    : CompactResponse() {
    *this = ::std::move(from);
  }

  inline CompactResponse& operator=(CompactResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactResponse* internal_default_instance() {
    return reinterpret_cast<const CompactResponse*>(
               &_CompactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CompactResponse* other);
  friend void swap(CompactResponse& a, CompactResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CompactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompactResponse& from);
  void MergeFrom(const CompactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:debugpb.CompactResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsCompactResponseImpl();
};
// -------------------------------------------------------------------

class InjectFailPointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.InjectFailPointRequest) */ {
 public:
  InjectFailPointRequest();
  virtual ~InjectFailPointRequest();

  InjectFailPointRequest(const InjectFailPointRequest& from);

  inline InjectFailPointRequest& operator=(const InjectFailPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InjectFailPointRequest(InjectFailPointRequest&& from) noexcept
    : InjectFailPointRequest() {
    *this = ::std::move(from);
  }

  inline InjectFailPointRequest& operator=(InjectFailPointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InjectFailPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectFailPointRequest* internal_default_instance() {
    return reinterpret_cast<const InjectFailPointRequest*>(
               &_InjectFailPointRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(InjectFailPointRequest* other);
  friend void swap(InjectFailPointRequest& a, InjectFailPointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InjectFailPointRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InjectFailPointRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InjectFailPointRequest& from);
  void MergeFrom(const InjectFailPointRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InjectFailPointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string actions = 2;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  const ::std::string& actions() const;
  void set_actions(const ::std::string& value);
  #if LANG_CXX11
  void set_actions(::std::string&& value);
  #endif
  void set_actions(const char* value);
  void set_actions(const char* value, size_t size);
  ::std::string* mutable_actions();
  ::std::string* release_actions();
  void set_allocated_actions(::std::string* actions);

  // @@protoc_insertion_point(class_scope:debugpb.InjectFailPointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr actions_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsInjectFailPointRequestImpl();
};
// -------------------------------------------------------------------

class InjectFailPointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.InjectFailPointResponse) */ {
 public:
  InjectFailPointResponse();
  virtual ~InjectFailPointResponse();

  InjectFailPointResponse(const InjectFailPointResponse& from);

  inline InjectFailPointResponse& operator=(const InjectFailPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InjectFailPointResponse(InjectFailPointResponse&& from) noexcept
    : InjectFailPointResponse() {
    *this = ::std::move(from);
  }

  inline InjectFailPointResponse& operator=(InjectFailPointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InjectFailPointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InjectFailPointResponse* internal_default_instance() {
    return reinterpret_cast<const InjectFailPointResponse*>(
               &_InjectFailPointResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(InjectFailPointResponse* other);
  friend void swap(InjectFailPointResponse& a, InjectFailPointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InjectFailPointResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InjectFailPointResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InjectFailPointResponse& from);
  void MergeFrom(const InjectFailPointResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InjectFailPointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:debugpb.InjectFailPointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsInjectFailPointResponseImpl();
};
// -------------------------------------------------------------------

class RecoverFailPointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RecoverFailPointRequest) */ {
 public:
  RecoverFailPointRequest();
  virtual ~RecoverFailPointRequest();

  RecoverFailPointRequest(const RecoverFailPointRequest& from);

  inline RecoverFailPointRequest& operator=(const RecoverFailPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverFailPointRequest(RecoverFailPointRequest&& from) noexcept
    : RecoverFailPointRequest() {
    *this = ::std::move(from);
  }

  inline RecoverFailPointRequest& operator=(RecoverFailPointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverFailPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverFailPointRequest* internal_default_instance() {
    return reinterpret_cast<const RecoverFailPointRequest*>(
               &_RecoverFailPointRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(RecoverFailPointRequest* other);
  friend void swap(RecoverFailPointRequest& a, RecoverFailPointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverFailPointRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RecoverFailPointRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecoverFailPointRequest& from);
  void MergeFrom(const RecoverFailPointRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecoverFailPointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:debugpb.RecoverFailPointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRecoverFailPointRequestImpl();
};
// -------------------------------------------------------------------

class RecoverFailPointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RecoverFailPointResponse) */ {
 public:
  RecoverFailPointResponse();
  virtual ~RecoverFailPointResponse();

  RecoverFailPointResponse(const RecoverFailPointResponse& from);

  inline RecoverFailPointResponse& operator=(const RecoverFailPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverFailPointResponse(RecoverFailPointResponse&& from) noexcept
    : RecoverFailPointResponse() {
    *this = ::std::move(from);
  }

  inline RecoverFailPointResponse& operator=(RecoverFailPointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverFailPointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverFailPointResponse* internal_default_instance() {
    return reinterpret_cast<const RecoverFailPointResponse*>(
               &_RecoverFailPointResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(RecoverFailPointResponse* other);
  friend void swap(RecoverFailPointResponse& a, RecoverFailPointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverFailPointResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RecoverFailPointResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecoverFailPointResponse& from);
  void MergeFrom(const RecoverFailPointResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecoverFailPointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:debugpb.RecoverFailPointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRecoverFailPointResponseImpl();
};
// -------------------------------------------------------------------

class ListFailPointsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ListFailPointsRequest) */ {
 public:
  ListFailPointsRequest();
  virtual ~ListFailPointsRequest();

  ListFailPointsRequest(const ListFailPointsRequest& from);

  inline ListFailPointsRequest& operator=(const ListFailPointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFailPointsRequest(ListFailPointsRequest&& from) noexcept
    : ListFailPointsRequest() {
    *this = ::std::move(from);
  }

  inline ListFailPointsRequest& operator=(ListFailPointsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFailPointsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFailPointsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFailPointsRequest*>(
               &_ListFailPointsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ListFailPointsRequest* other);
  friend void swap(ListFailPointsRequest& a, ListFailPointsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFailPointsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListFailPointsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListFailPointsRequest& from);
  void MergeFrom(const ListFailPointsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListFailPointsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:debugpb.ListFailPointsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsListFailPointsRequestImpl();
};
// -------------------------------------------------------------------

class ListFailPointsResponse_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ListFailPointsResponse.Entry) */ {
 public:
  ListFailPointsResponse_Entry();
  virtual ~ListFailPointsResponse_Entry();

  ListFailPointsResponse_Entry(const ListFailPointsResponse_Entry& from);

  inline ListFailPointsResponse_Entry& operator=(const ListFailPointsResponse_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFailPointsResponse_Entry(ListFailPointsResponse_Entry&& from) noexcept
    : ListFailPointsResponse_Entry() {
    *this = ::std::move(from);
  }

  inline ListFailPointsResponse_Entry& operator=(ListFailPointsResponse_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFailPointsResponse_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFailPointsResponse_Entry* internal_default_instance() {
    return reinterpret_cast<const ListFailPointsResponse_Entry*>(
               &_ListFailPointsResponse_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ListFailPointsResponse_Entry* other);
  friend void swap(ListFailPointsResponse_Entry& a, ListFailPointsResponse_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFailPointsResponse_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  ListFailPointsResponse_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListFailPointsResponse_Entry& from);
  void MergeFrom(const ListFailPointsResponse_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListFailPointsResponse_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string actions = 2;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  const ::std::string& actions() const;
  void set_actions(const ::std::string& value);
  #if LANG_CXX11
  void set_actions(::std::string&& value);
  #endif
  void set_actions(const char* value);
  void set_actions(const char* value, size_t size);
  ::std::string* mutable_actions();
  ::std::string* release_actions();
  void set_allocated_actions(::std::string* actions);

  // @@protoc_insertion_point(class_scope:debugpb.ListFailPointsResponse.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr actions_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsListFailPointsResponse_EntryImpl();
};
// -------------------------------------------------------------------

class ListFailPointsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ListFailPointsResponse) */ {
 public:
  ListFailPointsResponse();
  virtual ~ListFailPointsResponse();

  ListFailPointsResponse(const ListFailPointsResponse& from);

  inline ListFailPointsResponse& operator=(const ListFailPointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFailPointsResponse(ListFailPointsResponse&& from) noexcept
    : ListFailPointsResponse() {
    *this = ::std::move(from);
  }

  inline ListFailPointsResponse& operator=(ListFailPointsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFailPointsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFailPointsResponse* internal_default_instance() {
    return reinterpret_cast<const ListFailPointsResponse*>(
               &_ListFailPointsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ListFailPointsResponse* other);
  friend void swap(ListFailPointsResponse& a, ListFailPointsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFailPointsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListFailPointsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListFailPointsResponse& from);
  void MergeFrom(const ListFailPointsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListFailPointsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ListFailPointsResponse_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .debugpb.ListFailPointsResponse.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::debugpb::ListFailPointsResponse_Entry& entries(int index) const;
  ::debugpb::ListFailPointsResponse_Entry* mutable_entries(int index);
  ::debugpb::ListFailPointsResponse_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::debugpb::ListFailPointsResponse_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::debugpb::ListFailPointsResponse_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:debugpb.ListFailPointsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::debugpb::ListFailPointsResponse_Entry > entries_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsListFailPointsResponseImpl();
};
// -------------------------------------------------------------------

class GetMetricsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.GetMetricsRequest) */ {
 public:
  GetMetricsRequest();
  virtual ~GetMetricsRequest();

  GetMetricsRequest(const GetMetricsRequest& from);

  inline GetMetricsRequest& operator=(const GetMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMetricsRequest(GetMetricsRequest&& from) noexcept
    : GetMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetMetricsRequest& operator=(GetMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetricsRequest*>(
               &_GetMetricsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetMetricsRequest* other);
  friend void swap(GetMetricsRequest& a, GetMetricsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMetricsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMetricsRequest& from);
  void MergeFrom(const GetMetricsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMetricsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool all = 1;
  void clear_all();
  static const int kAllFieldNumber = 1;
  bool all() const;
  void set_all(bool value);

  // @@protoc_insertion_point(class_scope:debugpb.GetMetricsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool all_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsGetMetricsRequestImpl();
};
// -------------------------------------------------------------------

class GetMetricsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.GetMetricsResponse) */ {
 public:
  GetMetricsResponse();
  virtual ~GetMetricsResponse();

  GetMetricsResponse(const GetMetricsResponse& from);

  inline GetMetricsResponse& operator=(const GetMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMetricsResponse(GetMetricsResponse&& from) noexcept
    : GetMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetMetricsResponse& operator=(GetMetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetricsResponse*>(
               &_GetMetricsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GetMetricsResponse* other);
  friend void swap(GetMetricsResponse& a, GetMetricsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMetricsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMetricsResponse& from);
  void MergeFrom(const GetMetricsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMetricsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prometheus = 1;
  void clear_prometheus();
  static const int kPrometheusFieldNumber = 1;
  const ::std::string& prometheus() const;
  void set_prometheus(const ::std::string& value);
  #if LANG_CXX11
  void set_prometheus(::std::string&& value);
  #endif
  void set_prometheus(const char* value);
  void set_prometheus(const char* value, size_t size);
  ::std::string* mutable_prometheus();
  ::std::string* release_prometheus();
  void set_allocated_prometheus(::std::string* prometheus);

  // string rocksdb_kv = 2;
  void clear_rocksdb_kv();
  static const int kRocksdbKvFieldNumber = 2;
  const ::std::string& rocksdb_kv() const;
  void set_rocksdb_kv(const ::std::string& value);
  #if LANG_CXX11
  void set_rocksdb_kv(::std::string&& value);
  #endif
  void set_rocksdb_kv(const char* value);
  void set_rocksdb_kv(const char* value, size_t size);
  ::std::string* mutable_rocksdb_kv();
  ::std::string* release_rocksdb_kv();
  void set_allocated_rocksdb_kv(::std::string* rocksdb_kv);

  // string rocksdb_raft = 3;
  void clear_rocksdb_raft();
  static const int kRocksdbRaftFieldNumber = 3;
  const ::std::string& rocksdb_raft() const;
  void set_rocksdb_raft(const ::std::string& value);
  #if LANG_CXX11
  void set_rocksdb_raft(::std::string&& value);
  #endif
  void set_rocksdb_raft(const char* value);
  void set_rocksdb_raft(const char* value, size_t size);
  ::std::string* mutable_rocksdb_raft();
  ::std::string* release_rocksdb_raft();
  void set_allocated_rocksdb_raft(::std::string* rocksdb_raft);

  // string jemalloc = 4;
  void clear_jemalloc();
  static const int kJemallocFieldNumber = 4;
  const ::std::string& jemalloc() const;
  void set_jemalloc(const ::std::string& value);
  #if LANG_CXX11
  void set_jemalloc(::std::string&& value);
  #endif
  void set_jemalloc(const char* value);
  void set_jemalloc(const char* value, size_t size);
  ::std::string* mutable_jemalloc();
  ::std::string* release_jemalloc();
  void set_allocated_jemalloc(::std::string* jemalloc);

  // @@protoc_insertion_point(class_scope:debugpb.GetMetricsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prometheus_;
  ::google::protobuf::internal::ArenaStringPtr rocksdb_kv_;
  ::google::protobuf::internal::ArenaStringPtr rocksdb_raft_;
  ::google::protobuf::internal::ArenaStringPtr jemalloc_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsGetMetricsResponseImpl();
};
// -------------------------------------------------------------------

class RegionConsistencyCheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionConsistencyCheckRequest) */ {
 public:
  RegionConsistencyCheckRequest();
  virtual ~RegionConsistencyCheckRequest();

  RegionConsistencyCheckRequest(const RegionConsistencyCheckRequest& from);

  inline RegionConsistencyCheckRequest& operator=(const RegionConsistencyCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionConsistencyCheckRequest(RegionConsistencyCheckRequest&& from) noexcept
    : RegionConsistencyCheckRequest() {
    *this = ::std::move(from);
  }

  inline RegionConsistencyCheckRequest& operator=(RegionConsistencyCheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionConsistencyCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionConsistencyCheckRequest* internal_default_instance() {
    return reinterpret_cast<const RegionConsistencyCheckRequest*>(
               &_RegionConsistencyCheckRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(RegionConsistencyCheckRequest* other);
  friend void swap(RegionConsistencyCheckRequest& a, RegionConsistencyCheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionConsistencyCheckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionConsistencyCheckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionConsistencyCheckRequest& from);
  void MergeFrom(const RegionConsistencyCheckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionConsistencyCheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:debugpb.RegionConsistencyCheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 region_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionConsistencyCheckRequestImpl();
};
// -------------------------------------------------------------------

class RegionConsistencyCheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.RegionConsistencyCheckResponse) */ {
 public:
  RegionConsistencyCheckResponse();
  virtual ~RegionConsistencyCheckResponse();

  RegionConsistencyCheckResponse(const RegionConsistencyCheckResponse& from);

  inline RegionConsistencyCheckResponse& operator=(const RegionConsistencyCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionConsistencyCheckResponse(RegionConsistencyCheckResponse&& from) noexcept
    : RegionConsistencyCheckResponse() {
    *this = ::std::move(from);
  }

  inline RegionConsistencyCheckResponse& operator=(RegionConsistencyCheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionConsistencyCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionConsistencyCheckResponse* internal_default_instance() {
    return reinterpret_cast<const RegionConsistencyCheckResponse*>(
               &_RegionConsistencyCheckResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(RegionConsistencyCheckResponse* other);
  friend void swap(RegionConsistencyCheckResponse& a, RegionConsistencyCheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionConsistencyCheckResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionConsistencyCheckResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionConsistencyCheckResponse& from);
  void MergeFrom(const RegionConsistencyCheckResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionConsistencyCheckResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:debugpb.RegionConsistencyCheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsRegionConsistencyCheckResponseImpl();
};
// -------------------------------------------------------------------

class ModifyTikvConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ModifyTikvConfigRequest) */ {
 public:
  ModifyTikvConfigRequest();
  virtual ~ModifyTikvConfigRequest();

  ModifyTikvConfigRequest(const ModifyTikvConfigRequest& from);

  inline ModifyTikvConfigRequest& operator=(const ModifyTikvConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyTikvConfigRequest(ModifyTikvConfigRequest&& from) noexcept
    : ModifyTikvConfigRequest() {
    *this = ::std::move(from);
  }

  inline ModifyTikvConfigRequest& operator=(ModifyTikvConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyTikvConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyTikvConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyTikvConfigRequest*>(
               &_ModifyTikvConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(ModifyTikvConfigRequest* other);
  friend void swap(ModifyTikvConfigRequest& a, ModifyTikvConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyTikvConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyTikvConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyTikvConfigRequest& from);
  void MergeFrom(const ModifyTikvConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyTikvConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string config_name = 2;
  void clear_config_name();
  static const int kConfigNameFieldNumber = 2;
  const ::std::string& config_name() const;
  void set_config_name(const ::std::string& value);
  #if LANG_CXX11
  void set_config_name(::std::string&& value);
  #endif
  void set_config_name(const char* value);
  void set_config_name(const char* value, size_t size);
  ::std::string* mutable_config_name();
  ::std::string* release_config_name();
  void set_allocated_config_name(::std::string* config_name);

  // string config_value = 3;
  void clear_config_value();
  static const int kConfigValueFieldNumber = 3;
  const ::std::string& config_value() const;
  void set_config_value(const ::std::string& value);
  #if LANG_CXX11
  void set_config_value(::std::string&& value);
  #endif
  void set_config_value(const char* value);
  void set_config_value(const char* value, size_t size);
  ::std::string* mutable_config_value();
  ::std::string* release_config_value();
  void set_allocated_config_value(::std::string* config_value);

  // .debugpb.MODULE module = 1;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  ::debugpb::MODULE module() const;
  void set_module(::debugpb::MODULE value);

  // @@protoc_insertion_point(class_scope:debugpb.ModifyTikvConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr config_name_;
  ::google::protobuf::internal::ArenaStringPtr config_value_;
  int module_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsModifyTikvConfigRequestImpl();
};
// -------------------------------------------------------------------

class ModifyTikvConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:debugpb.ModifyTikvConfigResponse) */ {
 public:
  ModifyTikvConfigResponse();
  virtual ~ModifyTikvConfigResponse();

  ModifyTikvConfigResponse(const ModifyTikvConfigResponse& from);

  inline ModifyTikvConfigResponse& operator=(const ModifyTikvConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyTikvConfigResponse(ModifyTikvConfigResponse&& from) noexcept
    : ModifyTikvConfigResponse() {
    *this = ::std::move(from);
  }

  inline ModifyTikvConfigResponse& operator=(ModifyTikvConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyTikvConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyTikvConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ModifyTikvConfigResponse*>(
               &_ModifyTikvConfigResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(ModifyTikvConfigResponse* other);
  friend void swap(ModifyTikvConfigResponse& a, ModifyTikvConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyTikvConfigResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyTikvConfigResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyTikvConfigResponse& from);
  void MergeFrom(const ModifyTikvConfigResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyTikvConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:debugpb.ModifyTikvConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_debugpb_2eproto::TableStruct;
  friend void ::protobuf_debugpb_2eproto::InitDefaultsModifyTikvConfigResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// .debugpb.DB db = 1;
inline void GetRequest::clear_db() {
  db_ = 0;
}
inline ::debugpb::DB GetRequest::db() const {
  // @@protoc_insertion_point(field_get:debugpb.GetRequest.db)
  return static_cast< ::debugpb::DB >(db_);
}
inline void GetRequest::set_db(::debugpb::DB value) {
  
  db_ = value;
  // @@protoc_insertion_point(field_set:debugpb.GetRequest.db)
}

// string cf = 2;
inline void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:debugpb.GetRequest.cf)
  return cf_.GetNoArena();
}
inline void GetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetRequest.cf)
}
#if LANG_CXX11
inline void GetRequest::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetRequest.cf)
}
#endif
inline void GetRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetRequest.cf)
}
inline ::std::string* GetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:debugpb.GetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetRequest.cf)
}

// bytes key = 3;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:debugpb.GetRequest.key)
  return key_.GetNoArena();
}
inline void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetRequest.key)
}
#if LANG_CXX11
inline void GetRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetRequest.key)
}
#endif
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:debugpb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// bytes value = 1;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:debugpb.GetResponse.value)
  return value_.GetNoArena();
}
inline void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetResponse.value)
}
#if LANG_CXX11
inline void GetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetResponse.value)
}
#endif
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:debugpb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetResponse.value)
}

// -------------------------------------------------------------------

// RaftLogRequest

// uint64 region_id = 1;
inline void RaftLogRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftLogRequest::region_id() const {
  // @@protoc_insertion_point(field_get:debugpb.RaftLogRequest.region_id)
  return region_id_;
}
inline void RaftLogRequest::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:debugpb.RaftLogRequest.region_id)
}

// uint64 log_index = 2;
inline void RaftLogRequest::clear_log_index() {
  log_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftLogRequest::log_index() const {
  // @@protoc_insertion_point(field_get:debugpb.RaftLogRequest.log_index)
  return log_index_;
}
inline void RaftLogRequest::set_log_index(::google::protobuf::uint64 value) {
  
  log_index_ = value;
  // @@protoc_insertion_point(field_set:debugpb.RaftLogRequest.log_index)
}

// -------------------------------------------------------------------

// RaftLogResponse

// .eraftpb.Entry entry = 1;
inline bool RaftLogResponse::has_entry() const {
  return this != internal_default_instance() && entry_ != NULL;
}
inline const ::eraftpb::Entry& RaftLogResponse::entry() const {
  const ::eraftpb::Entry* p = entry_;
  // @@protoc_insertion_point(field_get:debugpb.RaftLogResponse.entry)
  return p != NULL ? *p : *reinterpret_cast<const ::eraftpb::Entry*>(
      &::eraftpb::_Entry_default_instance_);
}
inline ::eraftpb::Entry* RaftLogResponse::release_entry() {
  // @@protoc_insertion_point(field_release:debugpb.RaftLogResponse.entry)
  
  ::eraftpb::Entry* temp = entry_;
  entry_ = NULL;
  return temp;
}
inline ::eraftpb::Entry* RaftLogResponse::mutable_entry() {
  
  if (entry_ == NULL) {
    entry_ = new ::eraftpb::Entry;
  }
  // @@protoc_insertion_point(field_mutable:debugpb.RaftLogResponse.entry)
  return entry_;
}
inline void RaftLogResponse::set_allocated_entry(::eraftpb::Entry* entry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entry_);
  }
  if (entry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:debugpb.RaftLogResponse.entry)
}

// -------------------------------------------------------------------

// RegionInfoRequest

// uint64 region_id = 1;
inline void RegionInfoRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegionInfoRequest::region_id() const {
  // @@protoc_insertion_point(field_get:debugpb.RegionInfoRequest.region_id)
  return region_id_;
}
inline void RegionInfoRequest::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:debugpb.RegionInfoRequest.region_id)
}

// -------------------------------------------------------------------

// RegionInfoResponse

// .raft_serverpb.RaftLocalState raft_local_state = 1;
inline bool RegionInfoResponse::has_raft_local_state() const {
  return this != internal_default_instance() && raft_local_state_ != NULL;
}
inline const ::raft_serverpb::RaftLocalState& RegionInfoResponse::raft_local_state() const {
  const ::raft_serverpb::RaftLocalState* p = raft_local_state_;
  // @@protoc_insertion_point(field_get:debugpb.RegionInfoResponse.raft_local_state)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_serverpb::RaftLocalState*>(
      &::raft_serverpb::_RaftLocalState_default_instance_);
}
inline ::raft_serverpb::RaftLocalState* RegionInfoResponse::release_raft_local_state() {
  // @@protoc_insertion_point(field_release:debugpb.RegionInfoResponse.raft_local_state)
  
  ::raft_serverpb::RaftLocalState* temp = raft_local_state_;
  raft_local_state_ = NULL;
  return temp;
}
inline ::raft_serverpb::RaftLocalState* RegionInfoResponse::mutable_raft_local_state() {
  
  if (raft_local_state_ == NULL) {
    raft_local_state_ = new ::raft_serverpb::RaftLocalState;
  }
  // @@protoc_insertion_point(field_mutable:debugpb.RegionInfoResponse.raft_local_state)
  return raft_local_state_;
}
inline void RegionInfoResponse::set_allocated_raft_local_state(::raft_serverpb::RaftLocalState* raft_local_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raft_local_state_);
  }
  if (raft_local_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raft_local_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raft_local_state, submessage_arena);
    }
    
  } else {
    
  }
  raft_local_state_ = raft_local_state;
  // @@protoc_insertion_point(field_set_allocated:debugpb.RegionInfoResponse.raft_local_state)
}

// .raft_serverpb.RaftApplyState raft_apply_state = 2;
inline bool RegionInfoResponse::has_raft_apply_state() const {
  return this != internal_default_instance() && raft_apply_state_ != NULL;
}
inline const ::raft_serverpb::RaftApplyState& RegionInfoResponse::raft_apply_state() const {
  const ::raft_serverpb::RaftApplyState* p = raft_apply_state_;
  // @@protoc_insertion_point(field_get:debugpb.RegionInfoResponse.raft_apply_state)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_serverpb::RaftApplyState*>(
      &::raft_serverpb::_RaftApplyState_default_instance_);
}
inline ::raft_serverpb::RaftApplyState* RegionInfoResponse::release_raft_apply_state() {
  // @@protoc_insertion_point(field_release:debugpb.RegionInfoResponse.raft_apply_state)
  
  ::raft_serverpb::RaftApplyState* temp = raft_apply_state_;
  raft_apply_state_ = NULL;
  return temp;
}
inline ::raft_serverpb::RaftApplyState* RegionInfoResponse::mutable_raft_apply_state() {
  
  if (raft_apply_state_ == NULL) {
    raft_apply_state_ = new ::raft_serverpb::RaftApplyState;
  }
  // @@protoc_insertion_point(field_mutable:debugpb.RegionInfoResponse.raft_apply_state)
  return raft_apply_state_;
}
inline void RegionInfoResponse::set_allocated_raft_apply_state(::raft_serverpb::RaftApplyState* raft_apply_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raft_apply_state_);
  }
  if (raft_apply_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raft_apply_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raft_apply_state, submessage_arena);
    }
    
  } else {
    
  }
  raft_apply_state_ = raft_apply_state;
  // @@protoc_insertion_point(field_set_allocated:debugpb.RegionInfoResponse.raft_apply_state)
}

// .raft_serverpb.RegionLocalState region_local_state = 3;
inline bool RegionInfoResponse::has_region_local_state() const {
  return this != internal_default_instance() && region_local_state_ != NULL;
}
inline const ::raft_serverpb::RegionLocalState& RegionInfoResponse::region_local_state() const {
  const ::raft_serverpb::RegionLocalState* p = region_local_state_;
  // @@protoc_insertion_point(field_get:debugpb.RegionInfoResponse.region_local_state)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_serverpb::RegionLocalState*>(
      &::raft_serverpb::_RegionLocalState_default_instance_);
}
inline ::raft_serverpb::RegionLocalState* RegionInfoResponse::release_region_local_state() {
  // @@protoc_insertion_point(field_release:debugpb.RegionInfoResponse.region_local_state)
  
  ::raft_serverpb::RegionLocalState* temp = region_local_state_;
  region_local_state_ = NULL;
  return temp;
}
inline ::raft_serverpb::RegionLocalState* RegionInfoResponse::mutable_region_local_state() {
  
  if (region_local_state_ == NULL) {
    region_local_state_ = new ::raft_serverpb::RegionLocalState;
  }
  // @@protoc_insertion_point(field_mutable:debugpb.RegionInfoResponse.region_local_state)
  return region_local_state_;
}
inline void RegionInfoResponse::set_allocated_region_local_state(::raft_serverpb::RegionLocalState* region_local_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_local_state_);
  }
  if (region_local_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_local_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_local_state, submessage_arena);
    }
    
  } else {
    
  }
  region_local_state_ = region_local_state;
  // @@protoc_insertion_point(field_set_allocated:debugpb.RegionInfoResponse.region_local_state)
}

// -------------------------------------------------------------------

// RegionSizeRequest

// uint64 region_id = 1;
inline void RegionSizeRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegionSizeRequest::region_id() const {
  // @@protoc_insertion_point(field_get:debugpb.RegionSizeRequest.region_id)
  return region_id_;
}
inline void RegionSizeRequest::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:debugpb.RegionSizeRequest.region_id)
}

// repeated string cfs = 2;
inline int RegionSizeRequest::cfs_size() const {
  return cfs_.size();
}
inline void RegionSizeRequest::clear_cfs() {
  cfs_.Clear();
}
inline const ::std::string& RegionSizeRequest::cfs(int index) const {
  // @@protoc_insertion_point(field_get:debugpb.RegionSizeRequest.cfs)
  return cfs_.Get(index);
}
inline ::std::string* RegionSizeRequest::mutable_cfs(int index) {
  // @@protoc_insertion_point(field_mutable:debugpb.RegionSizeRequest.cfs)
  return cfs_.Mutable(index);
}
inline void RegionSizeRequest::set_cfs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:debugpb.RegionSizeRequest.cfs)
  cfs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RegionSizeRequest::set_cfs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:debugpb.RegionSizeRequest.cfs)
  cfs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RegionSizeRequest::set_cfs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cfs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:debugpb.RegionSizeRequest.cfs)
}
inline void RegionSizeRequest::set_cfs(int index, const char* value, size_t size) {
  cfs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:debugpb.RegionSizeRequest.cfs)
}
inline ::std::string* RegionSizeRequest::add_cfs() {
  // @@protoc_insertion_point(field_add_mutable:debugpb.RegionSizeRequest.cfs)
  return cfs_.Add();
}
inline void RegionSizeRequest::add_cfs(const ::std::string& value) {
  cfs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:debugpb.RegionSizeRequest.cfs)
}
#if LANG_CXX11
inline void RegionSizeRequest::add_cfs(::std::string&& value) {
  cfs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:debugpb.RegionSizeRequest.cfs)
}
#endif
inline void RegionSizeRequest::add_cfs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cfs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:debugpb.RegionSizeRequest.cfs)
}
inline void RegionSizeRequest::add_cfs(const char* value, size_t size) {
  cfs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:debugpb.RegionSizeRequest.cfs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RegionSizeRequest::cfs() const {
  // @@protoc_insertion_point(field_list:debugpb.RegionSizeRequest.cfs)
  return cfs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RegionSizeRequest::mutable_cfs() {
  // @@protoc_insertion_point(field_mutable_list:debugpb.RegionSizeRequest.cfs)
  return &cfs_;
}

// -------------------------------------------------------------------

// RegionSizeResponse_Entry

// string cf = 1;
inline void RegionSizeResponse_Entry::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionSizeResponse_Entry::cf() const {
  // @@protoc_insertion_point(field_get:debugpb.RegionSizeResponse.Entry.cf)
  return cf_.GetNoArena();
}
inline void RegionSizeResponse_Entry::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.RegionSizeResponse.Entry.cf)
}
#if LANG_CXX11
inline void RegionSizeResponse_Entry::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.RegionSizeResponse.Entry.cf)
}
#endif
inline void RegionSizeResponse_Entry::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.RegionSizeResponse.Entry.cf)
}
inline void RegionSizeResponse_Entry::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.RegionSizeResponse.Entry.cf)
}
inline ::std::string* RegionSizeResponse_Entry::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.RegionSizeResponse.Entry.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionSizeResponse_Entry::release_cf() {
  // @@protoc_insertion_point(field_release:debugpb.RegionSizeResponse.Entry.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionSizeResponse_Entry::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:debugpb.RegionSizeResponse.Entry.cf)
}

// uint64 size = 2;
inline void RegionSizeResponse_Entry::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegionSizeResponse_Entry::size() const {
  // @@protoc_insertion_point(field_get:debugpb.RegionSizeResponse.Entry.size)
  return size_;
}
inline void RegionSizeResponse_Entry::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:debugpb.RegionSizeResponse.Entry.size)
}

// -------------------------------------------------------------------

// RegionSizeResponse

// repeated .debugpb.RegionSizeResponse.Entry entries = 1;
inline int RegionSizeResponse::entries_size() const {
  return entries_.size();
}
inline void RegionSizeResponse::clear_entries() {
  entries_.Clear();
}
inline const ::debugpb::RegionSizeResponse_Entry& RegionSizeResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:debugpb.RegionSizeResponse.entries)
  return entries_.Get(index);
}
inline ::debugpb::RegionSizeResponse_Entry* RegionSizeResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:debugpb.RegionSizeResponse.entries)
  return entries_.Mutable(index);
}
inline ::debugpb::RegionSizeResponse_Entry* RegionSizeResponse::add_entries() {
  // @@protoc_insertion_point(field_add:debugpb.RegionSizeResponse.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::debugpb::RegionSizeResponse_Entry >*
RegionSizeResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:debugpb.RegionSizeResponse.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::debugpb::RegionSizeResponse_Entry >&
RegionSizeResponse::entries() const {
  // @@protoc_insertion_point(field_list:debugpb.RegionSizeResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// ScanMvccRequest

// bytes from_key = 1;
inline void ScanMvccRequest::clear_from_key() {
  from_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanMvccRequest::from_key() const {
  // @@protoc_insertion_point(field_get:debugpb.ScanMvccRequest.from_key)
  return from_key_.GetNoArena();
}
inline void ScanMvccRequest::set_from_key(const ::std::string& value) {
  
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ScanMvccRequest.from_key)
}
#if LANG_CXX11
inline void ScanMvccRequest::set_from_key(::std::string&& value) {
  
  from_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ScanMvccRequest.from_key)
}
#endif
inline void ScanMvccRequest::set_from_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ScanMvccRequest.from_key)
}
inline void ScanMvccRequest::set_from_key(const void* value, size_t size) {
  
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ScanMvccRequest.from_key)
}
inline ::std::string* ScanMvccRequest::mutable_from_key() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ScanMvccRequest.from_key)
  return from_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanMvccRequest::release_from_key() {
  // @@protoc_insertion_point(field_release:debugpb.ScanMvccRequest.from_key)
  
  return from_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanMvccRequest::set_allocated_from_key(::std::string* from_key) {
  if (from_key != NULL) {
    
  } else {
    
  }
  from_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_key);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ScanMvccRequest.from_key)
}

// bytes to_key = 2;
inline void ScanMvccRequest::clear_to_key() {
  to_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanMvccRequest::to_key() const {
  // @@protoc_insertion_point(field_get:debugpb.ScanMvccRequest.to_key)
  return to_key_.GetNoArena();
}
inline void ScanMvccRequest::set_to_key(const ::std::string& value) {
  
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ScanMvccRequest.to_key)
}
#if LANG_CXX11
inline void ScanMvccRequest::set_to_key(::std::string&& value) {
  
  to_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ScanMvccRequest.to_key)
}
#endif
inline void ScanMvccRequest::set_to_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ScanMvccRequest.to_key)
}
inline void ScanMvccRequest::set_to_key(const void* value, size_t size) {
  
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ScanMvccRequest.to_key)
}
inline ::std::string* ScanMvccRequest::mutable_to_key() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ScanMvccRequest.to_key)
  return to_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanMvccRequest::release_to_key() {
  // @@protoc_insertion_point(field_release:debugpb.ScanMvccRequest.to_key)
  
  return to_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanMvccRequest::set_allocated_to_key(::std::string* to_key) {
  if (to_key != NULL) {
    
  } else {
    
  }
  to_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_key);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ScanMvccRequest.to_key)
}

// uint64 limit = 3;
inline void ScanMvccRequest::clear_limit() {
  limit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ScanMvccRequest::limit() const {
  // @@protoc_insertion_point(field_get:debugpb.ScanMvccRequest.limit)
  return limit_;
}
inline void ScanMvccRequest::set_limit(::google::protobuf::uint64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:debugpb.ScanMvccRequest.limit)
}

// -------------------------------------------------------------------

// ScanMvccResponse

// bytes key = 1;
inline void ScanMvccResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanMvccResponse::key() const {
  // @@protoc_insertion_point(field_get:debugpb.ScanMvccResponse.key)
  return key_.GetNoArena();
}
inline void ScanMvccResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ScanMvccResponse.key)
}
#if LANG_CXX11
inline void ScanMvccResponse::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ScanMvccResponse.key)
}
#endif
inline void ScanMvccResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ScanMvccResponse.key)
}
inline void ScanMvccResponse::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ScanMvccResponse.key)
}
inline ::std::string* ScanMvccResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ScanMvccResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanMvccResponse::release_key() {
  // @@protoc_insertion_point(field_release:debugpb.ScanMvccResponse.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanMvccResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ScanMvccResponse.key)
}

// .kvrpcpb.MvccInfo info = 2;
inline bool ScanMvccResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline const ::kvrpcpb::MvccInfo& ScanMvccResponse::info() const {
  const ::kvrpcpb::MvccInfo* p = info_;
  // @@protoc_insertion_point(field_get:debugpb.ScanMvccResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::MvccInfo*>(
      &::kvrpcpb::_MvccInfo_default_instance_);
}
inline ::kvrpcpb::MvccInfo* ScanMvccResponse::release_info() {
  // @@protoc_insertion_point(field_release:debugpb.ScanMvccResponse.info)
  
  ::kvrpcpb::MvccInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::kvrpcpb::MvccInfo* ScanMvccResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::kvrpcpb::MvccInfo;
  }
  // @@protoc_insertion_point(field_mutable:debugpb.ScanMvccResponse.info)
  return info_;
}
inline void ScanMvccResponse::set_allocated_info(::kvrpcpb::MvccInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_);
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:debugpb.ScanMvccResponse.info)
}

// -------------------------------------------------------------------

// CompactRequest

// .debugpb.DB db = 1;
inline void CompactRequest::clear_db() {
  db_ = 0;
}
inline ::debugpb::DB CompactRequest::db() const {
  // @@protoc_insertion_point(field_get:debugpb.CompactRequest.db)
  return static_cast< ::debugpb::DB >(db_);
}
inline void CompactRequest::set_db(::debugpb::DB value) {
  
  db_ = value;
  // @@protoc_insertion_point(field_set:debugpb.CompactRequest.db)
}

// string cf = 2;
inline void CompactRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompactRequest::cf() const {
  // @@protoc_insertion_point(field_get:debugpb.CompactRequest.cf)
  return cf_.GetNoArena();
}
inline void CompactRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.CompactRequest.cf)
}
#if LANG_CXX11
inline void CompactRequest::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.CompactRequest.cf)
}
#endif
inline void CompactRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.CompactRequest.cf)
}
inline void CompactRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.CompactRequest.cf)
}
inline ::std::string* CompactRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.CompactRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompactRequest::release_cf() {
  // @@protoc_insertion_point(field_release:debugpb.CompactRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:debugpb.CompactRequest.cf)
}

// bytes from_key = 3;
inline void CompactRequest::clear_from_key() {
  from_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompactRequest::from_key() const {
  // @@protoc_insertion_point(field_get:debugpb.CompactRequest.from_key)
  return from_key_.GetNoArena();
}
inline void CompactRequest::set_from_key(const ::std::string& value) {
  
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.CompactRequest.from_key)
}
#if LANG_CXX11
inline void CompactRequest::set_from_key(::std::string&& value) {
  
  from_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.CompactRequest.from_key)
}
#endif
inline void CompactRequest::set_from_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.CompactRequest.from_key)
}
inline void CompactRequest::set_from_key(const void* value, size_t size) {
  
  from_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.CompactRequest.from_key)
}
inline ::std::string* CompactRequest::mutable_from_key() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.CompactRequest.from_key)
  return from_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompactRequest::release_from_key() {
  // @@protoc_insertion_point(field_release:debugpb.CompactRequest.from_key)
  
  return from_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactRequest::set_allocated_from_key(::std::string* from_key) {
  if (from_key != NULL) {
    
  } else {
    
  }
  from_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_key);
  // @@protoc_insertion_point(field_set_allocated:debugpb.CompactRequest.from_key)
}

// bytes to_key = 4;
inline void CompactRequest::clear_to_key() {
  to_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompactRequest::to_key() const {
  // @@protoc_insertion_point(field_get:debugpb.CompactRequest.to_key)
  return to_key_.GetNoArena();
}
inline void CompactRequest::set_to_key(const ::std::string& value) {
  
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.CompactRequest.to_key)
}
#if LANG_CXX11
inline void CompactRequest::set_to_key(::std::string&& value) {
  
  to_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.CompactRequest.to_key)
}
#endif
inline void CompactRequest::set_to_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.CompactRequest.to_key)
}
inline void CompactRequest::set_to_key(const void* value, size_t size) {
  
  to_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.CompactRequest.to_key)
}
inline ::std::string* CompactRequest::mutable_to_key() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.CompactRequest.to_key)
  return to_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompactRequest::release_to_key() {
  // @@protoc_insertion_point(field_release:debugpb.CompactRequest.to_key)
  
  return to_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompactRequest::set_allocated_to_key(::std::string* to_key) {
  if (to_key != NULL) {
    
  } else {
    
  }
  to_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_key);
  // @@protoc_insertion_point(field_set_allocated:debugpb.CompactRequest.to_key)
}

// uint32 threads = 5;
inline void CompactRequest::clear_threads() {
  threads_ = 0u;
}
inline ::google::protobuf::uint32 CompactRequest::threads() const {
  // @@protoc_insertion_point(field_get:debugpb.CompactRequest.threads)
  return threads_;
}
inline void CompactRequest::set_threads(::google::protobuf::uint32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:debugpb.CompactRequest.threads)
}

// -------------------------------------------------------------------

// CompactResponse

// -------------------------------------------------------------------

// InjectFailPointRequest

// string name = 1;
inline void InjectFailPointRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InjectFailPointRequest::name() const {
  // @@protoc_insertion_point(field_get:debugpb.InjectFailPointRequest.name)
  return name_.GetNoArena();
}
inline void InjectFailPointRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.InjectFailPointRequest.name)
}
#if LANG_CXX11
inline void InjectFailPointRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.InjectFailPointRequest.name)
}
#endif
inline void InjectFailPointRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.InjectFailPointRequest.name)
}
inline void InjectFailPointRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.InjectFailPointRequest.name)
}
inline ::std::string* InjectFailPointRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.InjectFailPointRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InjectFailPointRequest::release_name() {
  // @@protoc_insertion_point(field_release:debugpb.InjectFailPointRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InjectFailPointRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:debugpb.InjectFailPointRequest.name)
}

// string actions = 2;
inline void InjectFailPointRequest::clear_actions() {
  actions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InjectFailPointRequest::actions() const {
  // @@protoc_insertion_point(field_get:debugpb.InjectFailPointRequest.actions)
  return actions_.GetNoArena();
}
inline void InjectFailPointRequest::set_actions(const ::std::string& value) {
  
  actions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.InjectFailPointRequest.actions)
}
#if LANG_CXX11
inline void InjectFailPointRequest::set_actions(::std::string&& value) {
  
  actions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.InjectFailPointRequest.actions)
}
#endif
inline void InjectFailPointRequest::set_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.InjectFailPointRequest.actions)
}
inline void InjectFailPointRequest::set_actions(const char* value, size_t size) {
  
  actions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.InjectFailPointRequest.actions)
}
inline ::std::string* InjectFailPointRequest::mutable_actions() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.InjectFailPointRequest.actions)
  return actions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InjectFailPointRequest::release_actions() {
  // @@protoc_insertion_point(field_release:debugpb.InjectFailPointRequest.actions)
  
  return actions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InjectFailPointRequest::set_allocated_actions(::std::string* actions) {
  if (actions != NULL) {
    
  } else {
    
  }
  actions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actions);
  // @@protoc_insertion_point(field_set_allocated:debugpb.InjectFailPointRequest.actions)
}

// -------------------------------------------------------------------

// InjectFailPointResponse

// -------------------------------------------------------------------

// RecoverFailPointRequest

// string name = 1;
inline void RecoverFailPointRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecoverFailPointRequest::name() const {
  // @@protoc_insertion_point(field_get:debugpb.RecoverFailPointRequest.name)
  return name_.GetNoArena();
}
inline void RecoverFailPointRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.RecoverFailPointRequest.name)
}
#if LANG_CXX11
inline void RecoverFailPointRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.RecoverFailPointRequest.name)
}
#endif
inline void RecoverFailPointRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.RecoverFailPointRequest.name)
}
inline void RecoverFailPointRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.RecoverFailPointRequest.name)
}
inline ::std::string* RecoverFailPointRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.RecoverFailPointRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoverFailPointRequest::release_name() {
  // @@protoc_insertion_point(field_release:debugpb.RecoverFailPointRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverFailPointRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:debugpb.RecoverFailPointRequest.name)
}

// -------------------------------------------------------------------

// RecoverFailPointResponse

// -------------------------------------------------------------------

// ListFailPointsRequest

// -------------------------------------------------------------------

// ListFailPointsResponse_Entry

// string name = 1;
inline void ListFailPointsResponse_Entry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFailPointsResponse_Entry::name() const {
  // @@protoc_insertion_point(field_get:debugpb.ListFailPointsResponse.Entry.name)
  return name_.GetNoArena();
}
inline void ListFailPointsResponse_Entry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ListFailPointsResponse.Entry.name)
}
#if LANG_CXX11
inline void ListFailPointsResponse_Entry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ListFailPointsResponse.Entry.name)
}
#endif
inline void ListFailPointsResponse_Entry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ListFailPointsResponse.Entry.name)
}
inline void ListFailPointsResponse_Entry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ListFailPointsResponse.Entry.name)
}
inline ::std::string* ListFailPointsResponse_Entry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ListFailPointsResponse.Entry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFailPointsResponse_Entry::release_name() {
  // @@protoc_insertion_point(field_release:debugpb.ListFailPointsResponse.Entry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFailPointsResponse_Entry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ListFailPointsResponse.Entry.name)
}

// string actions = 2;
inline void ListFailPointsResponse_Entry::clear_actions() {
  actions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFailPointsResponse_Entry::actions() const {
  // @@protoc_insertion_point(field_get:debugpb.ListFailPointsResponse.Entry.actions)
  return actions_.GetNoArena();
}
inline void ListFailPointsResponse_Entry::set_actions(const ::std::string& value) {
  
  actions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ListFailPointsResponse.Entry.actions)
}
#if LANG_CXX11
inline void ListFailPointsResponse_Entry::set_actions(::std::string&& value) {
  
  actions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ListFailPointsResponse.Entry.actions)
}
#endif
inline void ListFailPointsResponse_Entry::set_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ListFailPointsResponse.Entry.actions)
}
inline void ListFailPointsResponse_Entry::set_actions(const char* value, size_t size) {
  
  actions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ListFailPointsResponse.Entry.actions)
}
inline ::std::string* ListFailPointsResponse_Entry::mutable_actions() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ListFailPointsResponse.Entry.actions)
  return actions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFailPointsResponse_Entry::release_actions() {
  // @@protoc_insertion_point(field_release:debugpb.ListFailPointsResponse.Entry.actions)
  
  return actions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFailPointsResponse_Entry::set_allocated_actions(::std::string* actions) {
  if (actions != NULL) {
    
  } else {
    
  }
  actions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actions);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ListFailPointsResponse.Entry.actions)
}

// -------------------------------------------------------------------

// ListFailPointsResponse

// repeated .debugpb.ListFailPointsResponse.Entry entries = 1;
inline int ListFailPointsResponse::entries_size() const {
  return entries_.size();
}
inline void ListFailPointsResponse::clear_entries() {
  entries_.Clear();
}
inline const ::debugpb::ListFailPointsResponse_Entry& ListFailPointsResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:debugpb.ListFailPointsResponse.entries)
  return entries_.Get(index);
}
inline ::debugpb::ListFailPointsResponse_Entry* ListFailPointsResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:debugpb.ListFailPointsResponse.entries)
  return entries_.Mutable(index);
}
inline ::debugpb::ListFailPointsResponse_Entry* ListFailPointsResponse::add_entries() {
  // @@protoc_insertion_point(field_add:debugpb.ListFailPointsResponse.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::debugpb::ListFailPointsResponse_Entry >*
ListFailPointsResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:debugpb.ListFailPointsResponse.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::debugpb::ListFailPointsResponse_Entry >&
ListFailPointsResponse::entries() const {
  // @@protoc_insertion_point(field_list:debugpb.ListFailPointsResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// GetMetricsRequest

// bool all = 1;
inline void GetMetricsRequest::clear_all() {
  all_ = false;
}
inline bool GetMetricsRequest::all() const {
  // @@protoc_insertion_point(field_get:debugpb.GetMetricsRequest.all)
  return all_;
}
inline void GetMetricsRequest::set_all(bool value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:debugpb.GetMetricsRequest.all)
}

// -------------------------------------------------------------------

// GetMetricsResponse

// string prometheus = 1;
inline void GetMetricsResponse::clear_prometheus() {
  prometheus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMetricsResponse::prometheus() const {
  // @@protoc_insertion_point(field_get:debugpb.GetMetricsResponse.prometheus)
  return prometheus_.GetNoArena();
}
inline void GetMetricsResponse::set_prometheus(const ::std::string& value) {
  
  prometheus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetMetricsResponse.prometheus)
}
#if LANG_CXX11
inline void GetMetricsResponse::set_prometheus(::std::string&& value) {
  
  prometheus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetMetricsResponse.prometheus)
}
#endif
inline void GetMetricsResponse::set_prometheus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prometheus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetMetricsResponse.prometheus)
}
inline void GetMetricsResponse::set_prometheus(const char* value, size_t size) {
  
  prometheus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetMetricsResponse.prometheus)
}
inline ::std::string* GetMetricsResponse::mutable_prometheus() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetMetricsResponse.prometheus)
  return prometheus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMetricsResponse::release_prometheus() {
  // @@protoc_insertion_point(field_release:debugpb.GetMetricsResponse.prometheus)
  
  return prometheus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsResponse::set_allocated_prometheus(::std::string* prometheus) {
  if (prometheus != NULL) {
    
  } else {
    
  }
  prometheus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prometheus);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetMetricsResponse.prometheus)
}

// string rocksdb_kv = 2;
inline void GetMetricsResponse::clear_rocksdb_kv() {
  rocksdb_kv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMetricsResponse::rocksdb_kv() const {
  // @@protoc_insertion_point(field_get:debugpb.GetMetricsResponse.rocksdb_kv)
  return rocksdb_kv_.GetNoArena();
}
inline void GetMetricsResponse::set_rocksdb_kv(const ::std::string& value) {
  
  rocksdb_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetMetricsResponse.rocksdb_kv)
}
#if LANG_CXX11
inline void GetMetricsResponse::set_rocksdb_kv(::std::string&& value) {
  
  rocksdb_kv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetMetricsResponse.rocksdb_kv)
}
#endif
inline void GetMetricsResponse::set_rocksdb_kv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rocksdb_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetMetricsResponse.rocksdb_kv)
}
inline void GetMetricsResponse::set_rocksdb_kv(const char* value, size_t size) {
  
  rocksdb_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetMetricsResponse.rocksdb_kv)
}
inline ::std::string* GetMetricsResponse::mutable_rocksdb_kv() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetMetricsResponse.rocksdb_kv)
  return rocksdb_kv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMetricsResponse::release_rocksdb_kv() {
  // @@protoc_insertion_point(field_release:debugpb.GetMetricsResponse.rocksdb_kv)
  
  return rocksdb_kv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsResponse::set_allocated_rocksdb_kv(::std::string* rocksdb_kv) {
  if (rocksdb_kv != NULL) {
    
  } else {
    
  }
  rocksdb_kv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rocksdb_kv);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetMetricsResponse.rocksdb_kv)
}

// string rocksdb_raft = 3;
inline void GetMetricsResponse::clear_rocksdb_raft() {
  rocksdb_raft_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMetricsResponse::rocksdb_raft() const {
  // @@protoc_insertion_point(field_get:debugpb.GetMetricsResponse.rocksdb_raft)
  return rocksdb_raft_.GetNoArena();
}
inline void GetMetricsResponse::set_rocksdb_raft(const ::std::string& value) {
  
  rocksdb_raft_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetMetricsResponse.rocksdb_raft)
}
#if LANG_CXX11
inline void GetMetricsResponse::set_rocksdb_raft(::std::string&& value) {
  
  rocksdb_raft_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetMetricsResponse.rocksdb_raft)
}
#endif
inline void GetMetricsResponse::set_rocksdb_raft(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rocksdb_raft_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetMetricsResponse.rocksdb_raft)
}
inline void GetMetricsResponse::set_rocksdb_raft(const char* value, size_t size) {
  
  rocksdb_raft_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetMetricsResponse.rocksdb_raft)
}
inline ::std::string* GetMetricsResponse::mutable_rocksdb_raft() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetMetricsResponse.rocksdb_raft)
  return rocksdb_raft_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMetricsResponse::release_rocksdb_raft() {
  // @@protoc_insertion_point(field_release:debugpb.GetMetricsResponse.rocksdb_raft)
  
  return rocksdb_raft_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsResponse::set_allocated_rocksdb_raft(::std::string* rocksdb_raft) {
  if (rocksdb_raft != NULL) {
    
  } else {
    
  }
  rocksdb_raft_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rocksdb_raft);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetMetricsResponse.rocksdb_raft)
}

// string jemalloc = 4;
inline void GetMetricsResponse::clear_jemalloc() {
  jemalloc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMetricsResponse::jemalloc() const {
  // @@protoc_insertion_point(field_get:debugpb.GetMetricsResponse.jemalloc)
  return jemalloc_.GetNoArena();
}
inline void GetMetricsResponse::set_jemalloc(const ::std::string& value) {
  
  jemalloc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.GetMetricsResponse.jemalloc)
}
#if LANG_CXX11
inline void GetMetricsResponse::set_jemalloc(::std::string&& value) {
  
  jemalloc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.GetMetricsResponse.jemalloc)
}
#endif
inline void GetMetricsResponse::set_jemalloc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jemalloc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.GetMetricsResponse.jemalloc)
}
inline void GetMetricsResponse::set_jemalloc(const char* value, size_t size) {
  
  jemalloc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.GetMetricsResponse.jemalloc)
}
inline ::std::string* GetMetricsResponse::mutable_jemalloc() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.GetMetricsResponse.jemalloc)
  return jemalloc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMetricsResponse::release_jemalloc() {
  // @@protoc_insertion_point(field_release:debugpb.GetMetricsResponse.jemalloc)
  
  return jemalloc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMetricsResponse::set_allocated_jemalloc(::std::string* jemalloc) {
  if (jemalloc != NULL) {
    
  } else {
    
  }
  jemalloc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jemalloc);
  // @@protoc_insertion_point(field_set_allocated:debugpb.GetMetricsResponse.jemalloc)
}

// -------------------------------------------------------------------

// RegionConsistencyCheckRequest

// uint64 region_id = 1;
inline void RegionConsistencyCheckRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegionConsistencyCheckRequest::region_id() const {
  // @@protoc_insertion_point(field_get:debugpb.RegionConsistencyCheckRequest.region_id)
  return region_id_;
}
inline void RegionConsistencyCheckRequest::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:debugpb.RegionConsistencyCheckRequest.region_id)
}

// -------------------------------------------------------------------

// RegionConsistencyCheckResponse

// -------------------------------------------------------------------

// ModifyTikvConfigRequest

// .debugpb.MODULE module = 1;
inline void ModifyTikvConfigRequest::clear_module() {
  module_ = 0;
}
inline ::debugpb::MODULE ModifyTikvConfigRequest::module() const {
  // @@protoc_insertion_point(field_get:debugpb.ModifyTikvConfigRequest.module)
  return static_cast< ::debugpb::MODULE >(module_);
}
inline void ModifyTikvConfigRequest::set_module(::debugpb::MODULE value) {
  
  module_ = value;
  // @@protoc_insertion_point(field_set:debugpb.ModifyTikvConfigRequest.module)
}

// string config_name = 2;
inline void ModifyTikvConfigRequest::clear_config_name() {
  config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyTikvConfigRequest::config_name() const {
  // @@protoc_insertion_point(field_get:debugpb.ModifyTikvConfigRequest.config_name)
  return config_name_.GetNoArena();
}
inline void ModifyTikvConfigRequest::set_config_name(const ::std::string& value) {
  
  config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ModifyTikvConfigRequest.config_name)
}
#if LANG_CXX11
inline void ModifyTikvConfigRequest::set_config_name(::std::string&& value) {
  
  config_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ModifyTikvConfigRequest.config_name)
}
#endif
inline void ModifyTikvConfigRequest::set_config_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ModifyTikvConfigRequest.config_name)
}
inline void ModifyTikvConfigRequest::set_config_name(const char* value, size_t size) {
  
  config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ModifyTikvConfigRequest.config_name)
}
inline ::std::string* ModifyTikvConfigRequest::mutable_config_name() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ModifyTikvConfigRequest.config_name)
  return config_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyTikvConfigRequest::release_config_name() {
  // @@protoc_insertion_point(field_release:debugpb.ModifyTikvConfigRequest.config_name)
  
  return config_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyTikvConfigRequest::set_allocated_config_name(::std::string* config_name) {
  if (config_name != NULL) {
    
  } else {
    
  }
  config_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_name);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ModifyTikvConfigRequest.config_name)
}

// string config_value = 3;
inline void ModifyTikvConfigRequest::clear_config_value() {
  config_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyTikvConfigRequest::config_value() const {
  // @@protoc_insertion_point(field_get:debugpb.ModifyTikvConfigRequest.config_value)
  return config_value_.GetNoArena();
}
inline void ModifyTikvConfigRequest::set_config_value(const ::std::string& value) {
  
  config_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:debugpb.ModifyTikvConfigRequest.config_value)
}
#if LANG_CXX11
inline void ModifyTikvConfigRequest::set_config_value(::std::string&& value) {
  
  config_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:debugpb.ModifyTikvConfigRequest.config_value)
}
#endif
inline void ModifyTikvConfigRequest::set_config_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:debugpb.ModifyTikvConfigRequest.config_value)
}
inline void ModifyTikvConfigRequest::set_config_value(const char* value, size_t size) {
  
  config_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:debugpb.ModifyTikvConfigRequest.config_value)
}
inline ::std::string* ModifyTikvConfigRequest::mutable_config_value() {
  
  // @@protoc_insertion_point(field_mutable:debugpb.ModifyTikvConfigRequest.config_value)
  return config_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyTikvConfigRequest::release_config_value() {
  // @@protoc_insertion_point(field_release:debugpb.ModifyTikvConfigRequest.config_value)
  
  return config_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyTikvConfigRequest::set_allocated_config_value(::std::string* config_value) {
  if (config_value != NULL) {
    
  } else {
    
  }
  config_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_value);
  // @@protoc_insertion_point(field_set_allocated:debugpb.ModifyTikvConfigRequest.config_value)
}

// -------------------------------------------------------------------

// ModifyTikvConfigResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace debugpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::debugpb::DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::debugpb::DB>() {
  return ::debugpb::DB_descriptor();
}
template <> struct is_proto_enum< ::debugpb::MODULE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::debugpb::MODULE>() {
  return ::debugpb::MODULE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_debugpb_2eproto__INCLUDED
