// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: import_kvpb.proto

#ifndef PROTOBUF_import_5fkvpb_2eproto__INCLUDED
#define PROTOBUF_import_5fkvpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_import_5fkvpb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsOpenRequestImpl();
void InitDefaultsOpenRequest();
void InitDefaultsOpenResponseImpl();
void InitDefaultsOpenResponse();
void InitDefaultsWriteHeadImpl();
void InitDefaultsWriteHead();
void InitDefaultsMutationImpl();
void InitDefaultsMutation();
void InitDefaultsWriteBatchImpl();
void InitDefaultsWriteBatch();
void InitDefaultsWriteRequestImpl();
void InitDefaultsWriteRequest();
void InitDefaultsWriteResponseImpl();
void InitDefaultsWriteResponse();
void InitDefaultsCloseRequestImpl();
void InitDefaultsCloseRequest();
void InitDefaultsCloseResponseImpl();
void InitDefaultsCloseResponse();
void InitDefaultsError_EngineNotFoundImpl();
void InitDefaultsError_EngineNotFound();
void InitDefaultsErrorImpl();
void InitDefaultsError();
inline void InitDefaults() {
  InitDefaultsOpenRequest();
  InitDefaultsOpenResponse();
  InitDefaultsWriteHead();
  InitDefaultsMutation();
  InitDefaultsWriteBatch();
  InitDefaultsWriteRequest();
  InitDefaultsWriteResponse();
  InitDefaultsCloseRequest();
  InitDefaultsCloseResponse();
  InitDefaultsError_EngineNotFound();
  InitDefaultsError();
}
}  // namespace protobuf_import_5fkvpb_2eproto
namespace import_kvpb {
class CloseRequest;
class CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class CloseResponse;
class CloseResponseDefaultTypeInternal;
extern CloseResponseDefaultTypeInternal _CloseResponse_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Error_EngineNotFound;
class Error_EngineNotFoundDefaultTypeInternal;
extern Error_EngineNotFoundDefaultTypeInternal _Error_EngineNotFound_default_instance_;
class Mutation;
class MutationDefaultTypeInternal;
extern MutationDefaultTypeInternal _Mutation_default_instance_;
class OpenRequest;
class OpenRequestDefaultTypeInternal;
extern OpenRequestDefaultTypeInternal _OpenRequest_default_instance_;
class OpenResponse;
class OpenResponseDefaultTypeInternal;
extern OpenResponseDefaultTypeInternal _OpenResponse_default_instance_;
class WriteBatch;
class WriteBatchDefaultTypeInternal;
extern WriteBatchDefaultTypeInternal _WriteBatch_default_instance_;
class WriteHead;
class WriteHeadDefaultTypeInternal;
extern WriteHeadDefaultTypeInternal _WriteHead_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteResponse;
class WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace import_kvpb
namespace import_kvpb {

enum Mutation_OP {
  Mutation_OP_Put = 0,
  Mutation_OP_Mutation_OP_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Mutation_OP_Mutation_OP_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Mutation_OP_IsValid(int value);
const Mutation_OP Mutation_OP_OP_MIN = Mutation_OP_Put;
const Mutation_OP Mutation_OP_OP_MAX = Mutation_OP_Put;
const int Mutation_OP_OP_ARRAYSIZE = Mutation_OP_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mutation_OP_descriptor();
inline const ::std::string& Mutation_OP_Name(Mutation_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mutation_OP_descriptor(), value);
}
inline bool Mutation_OP_Parse(
    const ::std::string& name, Mutation_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mutation_OP>(
    Mutation_OP_descriptor(), name, value);
}
// ===================================================================

class OpenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.OpenRequest) */ {
 public:
  OpenRequest();
  virtual ~OpenRequest();

  OpenRequest(const OpenRequest& from);

  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenRequest(OpenRequest&& from) noexcept
    : OpenRequest() {
    *this = ::std::move(from);
  }

  inline OpenRequest& operator=(OpenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRequest*>(
               &_OpenRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OpenRequest* other);
  friend void swap(OpenRequest& a, OpenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenRequest& from);
  void MergeFrom(const OpenRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:import_kvpb.OpenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsOpenRequestImpl();
};
// -------------------------------------------------------------------

class OpenResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.OpenResponse) */ {
 public:
  OpenResponse();
  virtual ~OpenResponse();

  OpenResponse(const OpenResponse& from);

  inline OpenResponse& operator=(const OpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenResponse(OpenResponse&& from) noexcept
    : OpenResponse() {
    *this = ::std::move(from);
  }

  inline OpenResponse& operator=(OpenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenResponse* internal_default_instance() {
    return reinterpret_cast<const OpenResponse*>(
               &_OpenResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OpenResponse* other);
  friend void swap(OpenResponse& a, OpenResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenResponse& from);
  void MergeFrom(const OpenResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:import_kvpb.OpenResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsOpenResponseImpl();
};
// -------------------------------------------------------------------

class WriteHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.WriteHead) */ {
 public:
  WriteHead();
  virtual ~WriteHead();

  WriteHead(const WriteHead& from);

  inline WriteHead& operator=(const WriteHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteHead(WriteHead&& from) noexcept
    : WriteHead() {
    *this = ::std::move(from);
  }

  inline WriteHead& operator=(WriteHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteHead* internal_default_instance() {
    return reinterpret_cast<const WriteHead*>(
               &_WriteHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WriteHead* other);
  friend void swap(WriteHead& a, WriteHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteHead* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WriteHead& from);
  void MergeFrom(const WriteHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WriteHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:import_kvpb.WriteHead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsWriteHeadImpl();
};
// -------------------------------------------------------------------

class Mutation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.Mutation) */ {
 public:
  Mutation();
  virtual ~Mutation();

  Mutation(const Mutation& from);

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mutation(Mutation&& from) noexcept
    : Mutation() {
    *this = ::std::move(from);
  }

  inline Mutation& operator=(Mutation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mutation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mutation* internal_default_instance() {
    return reinterpret_cast<const Mutation*>(
               &_Mutation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Mutation* other);
  friend void swap(Mutation& a, Mutation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mutation* New() const PROTOBUF_FINAL { return New(NULL); }

  Mutation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mutation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Mutation_OP OP;
  static const OP Put =
    Mutation_OP_Put;
  static inline bool OP_IsValid(int value) {
    return Mutation_OP_IsValid(value);
  }
  static const OP OP_MIN =
    Mutation_OP_OP_MIN;
  static const OP OP_MAX =
    Mutation_OP_OP_MAX;
  static const int OP_ARRAYSIZE =
    Mutation_OP_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_descriptor() {
    return Mutation_OP_descriptor();
  }
  static inline const ::std::string& OP_Name(OP value) {
    return Mutation_OP_Name(value);
  }
  static inline bool OP_Parse(const ::std::string& name,
      OP* value) {
    return Mutation_OP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .import_kvpb.Mutation.OP op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::import_kvpb::Mutation_OP op() const;
  void set_op(::import_kvpb::Mutation_OP value);

  // @@protoc_insertion_point(class_scope:import_kvpb.Mutation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int op_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsMutationImpl();
};
// -------------------------------------------------------------------

class WriteBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.WriteBatch) */ {
 public:
  WriteBatch();
  virtual ~WriteBatch();

  WriteBatch(const WriteBatch& from);

  inline WriteBatch& operator=(const WriteBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteBatch(WriteBatch&& from) noexcept
    : WriteBatch() {
    *this = ::std::move(from);
  }

  inline WriteBatch& operator=(WriteBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteBatch* internal_default_instance() {
    return reinterpret_cast<const WriteBatch*>(
               &_WriteBatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WriteBatch* other);
  friend void swap(WriteBatch& a, WriteBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteBatch* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteBatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WriteBatch& from);
  void MergeFrom(const WriteBatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WriteBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .import_kvpb.Mutation mutations = 2;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 2;
  const ::import_kvpb::Mutation& mutations(int index) const;
  ::import_kvpb::Mutation* mutable_mutations(int index);
  ::import_kvpb::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::import_kvpb::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::import_kvpb::Mutation >&
      mutations() const;

  // uint64 commit_ts = 1;
  void clear_commit_ts();
  static const int kCommitTsFieldNumber = 1;
  ::google::protobuf::uint64 commit_ts() const;
  void set_commit_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:import_kvpb.WriteBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::import_kvpb::Mutation > mutations_;
  ::google::protobuf::uint64 commit_ts_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsWriteBatchImpl();
};
// -------------------------------------------------------------------

class WriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteRequest& default_instance();

  enum ChunkCase {
    kHead = 1,
    kBatch = 2,
    CHUNK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WriteRequest* other);
  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .import_kvpb.WriteHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::import_kvpb::WriteHead& head() const;
  ::import_kvpb::WriteHead* release_head();
  ::import_kvpb::WriteHead* mutable_head();
  void set_allocated_head(::import_kvpb::WriteHead* head);

  // .import_kvpb.WriteBatch batch = 2;
  bool has_batch() const;
  void clear_batch();
  static const int kBatchFieldNumber = 2;
  const ::import_kvpb::WriteBatch& batch() const;
  ::import_kvpb::WriteBatch* release_batch();
  ::import_kvpb::WriteBatch* mutable_batch();
  void set_allocated_batch(::import_kvpb::WriteBatch* batch);

  ChunkCase chunk_case() const;
  // @@protoc_insertion_point(class_scope:import_kvpb.WriteRequest)
 private:
  void set_has_head();
  void set_has_batch();

  inline bool has_chunk() const;
  void clear_chunk();
  inline void clear_has_chunk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ChunkUnion {
    ChunkUnion() {}
    ::import_kvpb::WriteHead* head_;
    ::import_kvpb::WriteBatch* batch_;
  } chunk_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsWriteRequestImpl();
};
// -------------------------------------------------------------------

class WriteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.WriteResponse) */ {
 public:
  WriteResponse();
  virtual ~WriteResponse();

  WriteResponse(const WriteResponse& from);

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(WriteResponse* other);
  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WriteResponse& from);
  void MergeFrom(const WriteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WriteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .import_kvpb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::import_kvpb::Error& error() const;
  ::import_kvpb::Error* release_error();
  ::import_kvpb::Error* mutable_error();
  void set_allocated_error(::import_kvpb::Error* error);

  // @@protoc_insertion_point(class_scope:import_kvpb.WriteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::import_kvpb::Error* error_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsWriteResponseImpl();
};
// -------------------------------------------------------------------

class CloseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.CloseRequest) */ {
 public:
  CloseRequest();
  virtual ~CloseRequest();

  CloseRequest(const CloseRequest& from);

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CloseRequest* other);
  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CloseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloseRequest& from);
  void MergeFrom(const CloseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:import_kvpb.CloseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsCloseRequestImpl();
};
// -------------------------------------------------------------------

class CloseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.CloseResponse) */ {
 public:
  CloseResponse();
  virtual ~CloseResponse();

  CloseResponse(const CloseResponse& from);

  inline CloseResponse& operator=(const CloseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseResponse(CloseResponse&& from) noexcept
    : CloseResponse() {
    *this = ::std::move(from);
  }

  inline CloseResponse& operator=(CloseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseResponse* internal_default_instance() {
    return reinterpret_cast<const CloseResponse*>(
               &_CloseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CloseResponse* other);
  friend void swap(CloseResponse& a, CloseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CloseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloseResponse& from);
  void MergeFrom(const CloseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .import_kvpb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::import_kvpb::Error& error() const;
  ::import_kvpb::Error* release_error();
  ::import_kvpb::Error* mutable_error();
  void set_allocated_error(::import_kvpb::Error* error);

  // @@protoc_insertion_point(class_scope:import_kvpb.CloseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::import_kvpb::Error* error_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsCloseResponseImpl();
};
// -------------------------------------------------------------------

class Error_EngineNotFound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.Error.EngineNotFound) */ {
 public:
  Error_EngineNotFound();
  virtual ~Error_EngineNotFound();

  Error_EngineNotFound(const Error_EngineNotFound& from);

  inline Error_EngineNotFound& operator=(const Error_EngineNotFound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error_EngineNotFound(Error_EngineNotFound&& from) noexcept
    : Error_EngineNotFound() {
    *this = ::std::move(from);
  }

  inline Error_EngineNotFound& operator=(Error_EngineNotFound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error_EngineNotFound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error_EngineNotFound* internal_default_instance() {
    return reinterpret_cast<const Error_EngineNotFound*>(
               &_Error_EngineNotFound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Error_EngineNotFound* other);
  friend void swap(Error_EngineNotFound& a, Error_EngineNotFound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error_EngineNotFound* New() const PROTOBUF_FINAL { return New(NULL); }

  Error_EngineNotFound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error_EngineNotFound& from);
  void MergeFrom(const Error_EngineNotFound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error_EngineNotFound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:import_kvpb.Error.EngineNotFound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsError_EngineNotFoundImpl();
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:import_kvpb.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Error_EngineNotFound EngineNotFound;

  // accessors -------------------------------------------------------

  // .import_kvpb.Error.EngineNotFound engine_not_found = 1;
  bool has_engine_not_found() const;
  void clear_engine_not_found();
  static const int kEngineNotFoundFieldNumber = 1;
  const ::import_kvpb::Error_EngineNotFound& engine_not_found() const;
  ::import_kvpb::Error_EngineNotFound* release_engine_not_found();
  ::import_kvpb::Error_EngineNotFound* mutable_engine_not_found();
  void set_allocated_engine_not_found(::import_kvpb::Error_EngineNotFound* engine_not_found);

  // @@protoc_insertion_point(class_scope:import_kvpb.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::import_kvpb::Error_EngineNotFound* engine_not_found_;
  mutable int _cached_size_;
  friend struct ::protobuf_import_5fkvpb_2eproto::TableStruct;
  friend void ::protobuf_import_5fkvpb_2eproto::InitDefaultsErrorImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenRequest

// bytes uuid = 1;
inline void OpenRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenRequest::uuid() const {
  // @@protoc_insertion_point(field_get:import_kvpb.OpenRequest.uuid)
  return uuid_.GetNoArena();
}
inline void OpenRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:import_kvpb.OpenRequest.uuid)
}
#if LANG_CXX11
inline void OpenRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:import_kvpb.OpenRequest.uuid)
}
#endif
inline void OpenRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:import_kvpb.OpenRequest.uuid)
}
inline void OpenRequest::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:import_kvpb.OpenRequest.uuid)
}
inline ::std::string* OpenRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:import_kvpb.OpenRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:import_kvpb.OpenRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.OpenRequest.uuid)
}

// -------------------------------------------------------------------

// OpenResponse

// -------------------------------------------------------------------

// WriteHead

// bytes uuid = 1;
inline void WriteHead::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteHead::uuid() const {
  // @@protoc_insertion_point(field_get:import_kvpb.WriteHead.uuid)
  return uuid_.GetNoArena();
}
inline void WriteHead::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:import_kvpb.WriteHead.uuid)
}
#if LANG_CXX11
inline void WriteHead::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:import_kvpb.WriteHead.uuid)
}
#endif
inline void WriteHead::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:import_kvpb.WriteHead.uuid)
}
inline void WriteHead::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:import_kvpb.WriteHead.uuid)
}
inline ::std::string* WriteHead::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:import_kvpb.WriteHead.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteHead::release_uuid() {
  // @@protoc_insertion_point(field_release:import_kvpb.WriteHead.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteHead::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.WriteHead.uuid)
}

// -------------------------------------------------------------------

// Mutation

// .import_kvpb.Mutation.OP op = 1;
inline void Mutation::clear_op() {
  op_ = 0;
}
inline ::import_kvpb::Mutation_OP Mutation::op() const {
  // @@protoc_insertion_point(field_get:import_kvpb.Mutation.op)
  return static_cast< ::import_kvpb::Mutation_OP >(op_);
}
inline void Mutation::set_op(::import_kvpb::Mutation_OP value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:import_kvpb.Mutation.op)
}

// bytes key = 2;
inline void Mutation::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mutation::key() const {
  // @@protoc_insertion_point(field_get:import_kvpb.Mutation.key)
  return key_.GetNoArena();
}
inline void Mutation::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:import_kvpb.Mutation.key)
}
#if LANG_CXX11
inline void Mutation::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:import_kvpb.Mutation.key)
}
#endif
inline void Mutation::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:import_kvpb.Mutation.key)
}
inline void Mutation::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:import_kvpb.Mutation.key)
}
inline ::std::string* Mutation::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:import_kvpb.Mutation.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mutation::release_key() {
  // @@protoc_insertion_point(field_release:import_kvpb.Mutation.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mutation::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.Mutation.key)
}

// bytes value = 3;
inline void Mutation::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mutation::value() const {
  // @@protoc_insertion_point(field_get:import_kvpb.Mutation.value)
  return value_.GetNoArena();
}
inline void Mutation::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:import_kvpb.Mutation.value)
}
#if LANG_CXX11
inline void Mutation::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:import_kvpb.Mutation.value)
}
#endif
inline void Mutation::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:import_kvpb.Mutation.value)
}
inline void Mutation::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:import_kvpb.Mutation.value)
}
inline ::std::string* Mutation::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:import_kvpb.Mutation.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mutation::release_value() {
  // @@protoc_insertion_point(field_release:import_kvpb.Mutation.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mutation::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.Mutation.value)
}

// -------------------------------------------------------------------

// WriteBatch

// uint64 commit_ts = 1;
inline void WriteBatch::clear_commit_ts() {
  commit_ts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteBatch::commit_ts() const {
  // @@protoc_insertion_point(field_get:import_kvpb.WriteBatch.commit_ts)
  return commit_ts_;
}
inline void WriteBatch::set_commit_ts(::google::protobuf::uint64 value) {
  
  commit_ts_ = value;
  // @@protoc_insertion_point(field_set:import_kvpb.WriteBatch.commit_ts)
}

// repeated .import_kvpb.Mutation mutations = 2;
inline int WriteBatch::mutations_size() const {
  return mutations_.size();
}
inline void WriteBatch::clear_mutations() {
  mutations_.Clear();
}
inline const ::import_kvpb::Mutation& WriteBatch::mutations(int index) const {
  // @@protoc_insertion_point(field_get:import_kvpb.WriteBatch.mutations)
  return mutations_.Get(index);
}
inline ::import_kvpb::Mutation* WriteBatch::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:import_kvpb.WriteBatch.mutations)
  return mutations_.Mutable(index);
}
inline ::import_kvpb::Mutation* WriteBatch::add_mutations() {
  // @@protoc_insertion_point(field_add:import_kvpb.WriteBatch.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::import_kvpb::Mutation >*
WriteBatch::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:import_kvpb.WriteBatch.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::import_kvpb::Mutation >&
WriteBatch::mutations() const {
  // @@protoc_insertion_point(field_list:import_kvpb.WriteBatch.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// WriteRequest

// .import_kvpb.WriteHead head = 1;
inline bool WriteRequest::has_head() const {
  return chunk_case() == kHead;
}
inline void WriteRequest::set_has_head() {
  _oneof_case_[0] = kHead;
}
inline void WriteRequest::clear_head() {
  if (has_head()) {
    delete chunk_.head_;
    clear_has_chunk();
  }
}
inline ::import_kvpb::WriteHead* WriteRequest::release_head() {
  // @@protoc_insertion_point(field_release:import_kvpb.WriteRequest.head)
  if (has_head()) {
    clear_has_chunk();
      ::import_kvpb::WriteHead* temp = chunk_.head_;
    chunk_.head_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::import_kvpb::WriteHead& WriteRequest::head() const {
  // @@protoc_insertion_point(field_get:import_kvpb.WriteRequest.head)
  return has_head()
      ? *chunk_.head_
      : *reinterpret_cast< ::import_kvpb::WriteHead*>(&::import_kvpb::_WriteHead_default_instance_);
}
inline ::import_kvpb::WriteHead* WriteRequest::mutable_head() {
  if (!has_head()) {
    clear_chunk();
    set_has_head();
    chunk_.head_ = new ::import_kvpb::WriteHead;
  }
  // @@protoc_insertion_point(field_mutable:import_kvpb.WriteRequest.head)
  return chunk_.head_;
}

// .import_kvpb.WriteBatch batch = 2;
inline bool WriteRequest::has_batch() const {
  return chunk_case() == kBatch;
}
inline void WriteRequest::set_has_batch() {
  _oneof_case_[0] = kBatch;
}
inline void WriteRequest::clear_batch() {
  if (has_batch()) {
    delete chunk_.batch_;
    clear_has_chunk();
  }
}
inline ::import_kvpb::WriteBatch* WriteRequest::release_batch() {
  // @@protoc_insertion_point(field_release:import_kvpb.WriteRequest.batch)
  if (has_batch()) {
    clear_has_chunk();
      ::import_kvpb::WriteBatch* temp = chunk_.batch_;
    chunk_.batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::import_kvpb::WriteBatch& WriteRequest::batch() const {
  // @@protoc_insertion_point(field_get:import_kvpb.WriteRequest.batch)
  return has_batch()
      ? *chunk_.batch_
      : *reinterpret_cast< ::import_kvpb::WriteBatch*>(&::import_kvpb::_WriteBatch_default_instance_);
}
inline ::import_kvpb::WriteBatch* WriteRequest::mutable_batch() {
  if (!has_batch()) {
    clear_chunk();
    set_has_batch();
    chunk_.batch_ = new ::import_kvpb::WriteBatch;
  }
  // @@protoc_insertion_point(field_mutable:import_kvpb.WriteRequest.batch)
  return chunk_.batch_;
}

inline bool WriteRequest::has_chunk() const {
  return chunk_case() != CHUNK_NOT_SET;
}
inline void WriteRequest::clear_has_chunk() {
  _oneof_case_[0] = CHUNK_NOT_SET;
}
inline WriteRequest::ChunkCase WriteRequest::chunk_case() const {
  return WriteRequest::ChunkCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WriteResponse

// .import_kvpb.Error error = 1;
inline bool WriteResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void WriteResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::import_kvpb::Error& WriteResponse::error() const {
  const ::import_kvpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:import_kvpb.WriteResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::import_kvpb::Error*>(
      &::import_kvpb::_Error_default_instance_);
}
inline ::import_kvpb::Error* WriteResponse::release_error() {
  // @@protoc_insertion_point(field_release:import_kvpb.WriteResponse.error)
  
  ::import_kvpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::import_kvpb::Error* WriteResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::import_kvpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:import_kvpb.WriteResponse.error)
  return error_;
}
inline void WriteResponse::set_allocated_error(::import_kvpb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.WriteResponse.error)
}

// -------------------------------------------------------------------

// CloseRequest

// bytes uuid = 1;
inline void CloseRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloseRequest::uuid() const {
  // @@protoc_insertion_point(field_get:import_kvpb.CloseRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CloseRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:import_kvpb.CloseRequest.uuid)
}
#if LANG_CXX11
inline void CloseRequest::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:import_kvpb.CloseRequest.uuid)
}
#endif
inline void CloseRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:import_kvpb.CloseRequest.uuid)
}
inline void CloseRequest::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:import_kvpb.CloseRequest.uuid)
}
inline ::std::string* CloseRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:import_kvpb.CloseRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloseRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:import_kvpb.CloseRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.CloseRequest.uuid)
}

// -------------------------------------------------------------------

// CloseResponse

// .import_kvpb.Error error = 1;
inline bool CloseResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void CloseResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::import_kvpb::Error& CloseResponse::error() const {
  const ::import_kvpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:import_kvpb.CloseResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::import_kvpb::Error*>(
      &::import_kvpb::_Error_default_instance_);
}
inline ::import_kvpb::Error* CloseResponse::release_error() {
  // @@protoc_insertion_point(field_release:import_kvpb.CloseResponse.error)
  
  ::import_kvpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::import_kvpb::Error* CloseResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::import_kvpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:import_kvpb.CloseResponse.error)
  return error_;
}
inline void CloseResponse::set_allocated_error(::import_kvpb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.CloseResponse.error)
}

// -------------------------------------------------------------------

// Error_EngineNotFound

// bytes uuid = 1;
inline void Error_EngineNotFound::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error_EngineNotFound::uuid() const {
  // @@protoc_insertion_point(field_get:import_kvpb.Error.EngineNotFound.uuid)
  return uuid_.GetNoArena();
}
inline void Error_EngineNotFound::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:import_kvpb.Error.EngineNotFound.uuid)
}
#if LANG_CXX11
inline void Error_EngineNotFound::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:import_kvpb.Error.EngineNotFound.uuid)
}
#endif
inline void Error_EngineNotFound::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:import_kvpb.Error.EngineNotFound.uuid)
}
inline void Error_EngineNotFound::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:import_kvpb.Error.EngineNotFound.uuid)
}
inline ::std::string* Error_EngineNotFound::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:import_kvpb.Error.EngineNotFound.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error_EngineNotFound::release_uuid() {
  // @@protoc_insertion_point(field_release:import_kvpb.Error.EngineNotFound.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error_EngineNotFound::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.Error.EngineNotFound.uuid)
}

// -------------------------------------------------------------------

// Error

// .import_kvpb.Error.EngineNotFound engine_not_found = 1;
inline bool Error::has_engine_not_found() const {
  return this != internal_default_instance() && engine_not_found_ != NULL;
}
inline void Error::clear_engine_not_found() {
  if (GetArenaNoVirtual() == NULL && engine_not_found_ != NULL) {
    delete engine_not_found_;
  }
  engine_not_found_ = NULL;
}
inline const ::import_kvpb::Error_EngineNotFound& Error::engine_not_found() const {
  const ::import_kvpb::Error_EngineNotFound* p = engine_not_found_;
  // @@protoc_insertion_point(field_get:import_kvpb.Error.engine_not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::import_kvpb::Error_EngineNotFound*>(
      &::import_kvpb::_Error_EngineNotFound_default_instance_);
}
inline ::import_kvpb::Error_EngineNotFound* Error::release_engine_not_found() {
  // @@protoc_insertion_point(field_release:import_kvpb.Error.engine_not_found)
  
  ::import_kvpb::Error_EngineNotFound* temp = engine_not_found_;
  engine_not_found_ = NULL;
  return temp;
}
inline ::import_kvpb::Error_EngineNotFound* Error::mutable_engine_not_found() {
  
  if (engine_not_found_ == NULL) {
    engine_not_found_ = new ::import_kvpb::Error_EngineNotFound;
  }
  // @@protoc_insertion_point(field_mutable:import_kvpb.Error.engine_not_found)
  return engine_not_found_;
}
inline void Error::set_allocated_engine_not_found(::import_kvpb::Error_EngineNotFound* engine_not_found) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete engine_not_found_;
  }
  if (engine_not_found) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      engine_not_found = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, engine_not_found, submessage_arena);
    }
    
  } else {
    
  }
  engine_not_found_ = engine_not_found;
  // @@protoc_insertion_point(field_set_allocated:import_kvpb.Error.engine_not_found)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace import_kvpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::import_kvpb::Mutation_OP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::import_kvpb::Mutation_OP>() {
  return ::import_kvpb::Mutation_OP_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_import_5fkvpb_2eproto__INCLUDED
